%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1410.i047.062.P.m004.c20.musical instruments.eps
%%Creator: Adobe Illustrator(R) 18.0
%%For: IvAN
%%CreationDate: 10/26/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.0.0 x18 R agm 4.7713 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c011 79.156289, 2014/03/31-23:39:12        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2014-10-26T16:41:59+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-10-26T16:41:59+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-10-26T16:41:59+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2014 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7vmS1Ia31LT7i7ubOC4j&#xA;lurPiLqBGBeMyCqcwOnIdMkYkC0WETkUuxV2KuxV2Krk+2vzGKswzGbXYq7FXYq7FXYq7FXYqw3M&#xA;lqdirsVdirsVdirsVdirMsxm12KuxV2KuxV2KuxV2KvJvzK1nWNH8nX17oys2pDhHAVjMnD1HCNI&#xA;f2UCKS3N/hXqczIGII4uTRIGtub5w8t+cbrQ9Xt/MenOVvwFXVLOV2Zb2KQITKJGd2dpWLMRxASi&#xA;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&#xA;3MlqdirsVdirsVdirsVdir//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:0a379708-7ccf-ce45-a2e8-756867bdbbe0</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:0a379708-7ccf-ce45-a2e8-756867bdbbe0</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:05210478D35CE411A991C0846461FFBD</stRef:instanceID>
            <stRef:documentID>xmp.did:05210478D35CE411A991C0846461FFBD</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0332F4383F5CE411ABEBDE3E06266BD8</stEvt:instanceID>
                  <stEvt:when>2014-10-25T21:53:59+08:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:05210478D35CE411A991C0846461FFBD</stEvt:instanceID>
                  <stEvt:when>2014-10-26T12:46:44+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0a379708-7ccf-ce45-a2e8-756867bdbbe0</stEvt:instanceID>
                  <stEvt:when>2014-10-26T16:41:59+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2014 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
337.5 337.5 mo
225 337.5 li
225 225.001 li
337.5 225.001 li
337.5 337.5 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.827451 .854902 .909804 rgb
f
246.23 306.799 mo
246.23 309.611 li
281.807 309.611 li
281.807 306.799 li
246.23 306.799 li
cp
1 1 1 rgb
f
281.807 309.611 mo
317.383 309.611 li
317.383 306.799 li
281.807 306.799 li
281.807 309.611 li
cp
.0352941 .188235 .431373 rgb
f
281.807 274.264 mo
281.807 276.887 li
317.383 276.887 li
317.383 274.264 li
281.807 274.264 li
cp
f
281.807 274.264 mo
246.23 274.264 li
246.23 276.887 li
281.807 276.887 li
281.807 274.264 li
cp
1 1 1 rgb
f
281.807 304.07 mo
246.23 304.07 li
246.23 306.799 li
281.807 306.799 li
281.807 304.07 li
cp
.65098 .65098 .65098 rgb
f
281.807 276.887 mo
246.23 276.887 li
246.23 279.742 li
281.807 279.742 li
281.807 276.887 li
cp
f
281.807 279.742 mo
317.383 279.742 li
317.383 276.887 li
281.807 276.887 li
281.807 279.742 li
cp
0 0 0 rgb
f
281.807 306.799 mo
317.383 306.799 li
317.383 304.07 li
281.807 304.07 li
281.807 306.799 li
cp
f
281.807 304.07 mo
317.383 304.07 li
317.383 279.742 li
281.807 279.742 li
281.807 304.07 li
cp
.317647 .105882 .313726 rgb
f
281.807 279.742 mo
246.23 279.742 li
246.23 304.07 li
281.807 304.07 li
281.807 279.742 li
cp
.454902 .286275 .45098 rgb
f
281.807 287.228 mo
283.217 287.228 284.357 286.088 284.357 284.678 cv
284.357 283.272 283.217 282.129 281.807 282.129 cv
280.398 282.129 279.256 283.272 279.256 284.678 cv
279.256 286.088 280.398 287.228 281.807 287.228 cv
cp
0 0 0 rgb
f
281.807 301.617 mo
283.217 301.617 284.357 300.477 284.357 299.066 cv
284.357 297.658 283.217 296.516 281.807 296.516 cv
280.398 296.516 279.256 297.658 279.256 299.066 cv
279.256 300.477 280.398 301.617 281.807 301.617 cv
cp
f
307.053 287.297 mo
308.461 287.297 309.603 286.154 309.603 284.744 cv
309.603 283.336 308.461 282.193 307.053 282.193 cv
305.645 282.193 304.502 283.336 304.502 284.744 cv
304.502 286.154 305.645 287.297 307.053 287.297 cv
cp
f
307.049 301.684 mo
308.459 301.684 309.602 300.543 309.602 299.133 cv
309.602 297.725 308.459 296.582 307.049 296.582 cv
305.641 296.582 304.5 297.725 304.5 299.133 cv
304.5 300.543 305.641 301.684 307.049 301.684 cv
cp
f
257.088 287.199 mo
258.496 287.199 259.637 286.059 259.637 284.648 cv
259.637 283.242 258.496 282.1 257.088 282.1 cv
255.68 282.1 254.535 283.242 254.535 284.648 cv
254.535 286.059 255.68 287.199 257.088 287.199 cv
cp
.65098 .65098 .65098 rgb
f
257.088 301.588 mo
258.496 301.588 259.637 300.447 259.637 299.037 cv
259.637 297.629 258.496 296.488 257.088 296.488 cv
255.68 296.488 254.535 297.629 254.535 299.037 cv
254.535 300.447 255.68 301.588 257.088 301.588 cv
cp
f
246.23 301.588 mo
246.23 296.488 li
244.822 296.488 243.68 297.629 243.68 299.037 cv
243.68 300.447 244.822 301.588 246.23 301.588 cv
cp
f
246.23 287.199 mo
246.23 282.1 li
244.822 282.1 243.68 283.242 243.68 284.648 cv
243.68 286.059 244.822 287.199 246.23 287.199 cv
cp
f
317.383 282.1 mo
317.383 287.201 li
318.793 287.201 319.935 286.06 319.935 284.652 cv
319.935 283.242 318.793 282.1 317.383 282.1 cv
cp
0 0 0 rgb
f
317.383 296.488 mo
317.383 301.588 li
318.793 301.588 319.935 300.447 319.935 299.037 cv
319.935 297.629 318.793 296.488 317.383 296.488 cv
cp
f
247.904 268.502 mo
312.395 254.654 li
312.492 253.904 313.039 253.258 313.818 253.076 cv
314.826 252.84 315.832 253.463 316.068 254.471 cv
316.305 255.479 315.68 256.486 314.672 256.723 cv
313.941 256.893 313.213 256.607 312.777 256.055 cv
248.77 272.195 li
247.904 268.502 li
cp
.890196 .490196 0 rgb
f
315.912 268.502 mo
251.426 254.654 li
251.324 253.904 250.781 253.258 250 253.076 cv
248.994 252.84 247.984 253.463 247.75 254.471 cv
247.514 255.479 248.141 256.486 249.146 256.723 cv
249.875 256.893 250.605 256.607 251.041 256.055 cv
315.049 272.195 li
315.912 268.502 li
cp
.227451 .34902 .545098 rgb
f
225 337.5 mo
112.499 337.5 li
112.499 225.001 li
225 225.001 li
225 337.5 li
cp
1 1 1 rgb
f
152.373 264.586 mo
159.011 299.213 li
161.062 293.357 li
156.58 258.164 li
152.373 264.586 li
cp
.866667 .866667 .866667 rgb
f
162.999 262.377 mo
165.277 297.91 li
168.482 292.598 li
168.433 256.951 li
162.999 262.377 li
cp
f
145.226 261.785 mo
153.949 295.625 li
159.011 299.213 li
152.373 264.586 li
145.226 261.785 li
cp
.65098 .65098 .65098 rgb
f
156.58 258.164 mo
161.062 293.357 li
165.277 297.91 li
162.999 262.377 li
156.58 258.164 li
cp
f
180.427 258.195 mo
175.994 293.377 li
178.066 299.25 li
184.681 264.648 li
180.427 258.195 li
cp
f
184.681 264.648 mo
178.066 299.25 li
183.183 295.699 li
191.906 261.904 li
184.681 264.648 li
cp
.866667 .866667 .866667 rgb
f
168.433 256.951 mo
168.482 292.598 li
171.726 297.914 li
173.931 262.383 li
168.433 256.951 li
cp
.65098 .65098 .65098 rgb
f
173.931 262.383 mo
171.726 297.914 li
175.994 293.377 li
180.427 258.195 li
173.931 262.383 li
cp
.866667 .866667 .866667 rgb
f
179.3 300.23 mo
183.917 301.744 li
198.117 258.397 li
193.498 256.885 li
179.3 300.23 li
cp
.0352941 .188235 .431373 rgb
f
194.124 305.086 mo
198.744 306.6 li
212.941 263.254 li
208.324 261.74 li
194.124 305.086 li
cp
f
194.124 305.086 mo
183.917 301.744 li
198.117 258.397 li
208.324 261.74 li
194.124 305.086 li
cp
0 0 0 rgb
f
196.289 298.475 mo
186.093 295.137 li
195.925 265.115 li
206.123 268.453 li
196.289 298.475 li
cp
1 1 1 rgb
f
201.005 269.492 mo
200.753 270.264 201.173 271.094 201.943 271.346 cv
202.714 271.598 203.544 271.178 203.796 270.408 cv
204.048 269.637 203.628 268.807 202.857 268.555 cv
202.087 268.303 201.257 268.723 201.005 269.492 cv
cp
.85098 .431373 .517647 rgb
f
196.818 268.121 mo
196.566 268.893 196.986 269.723 197.755 269.975 cv
198.526 270.227 199.357 269.807 199.609 269.037 cv
199.863 268.266 199.441 267.435 198.671 267.184 cv
197.9 266.932 197.07 267.352 196.818 268.121 cv
cp
f
199.632 273.682 mo
199.38 274.451 199.8 275.281 200.572 275.533 cv
201.343 275.785 202.173 275.365 202.425 274.596 cv
202.677 273.824 202.257 272.994 201.486 272.742 cv
200.714 272.49 199.886 272.91 199.632 273.682 cv
cp
f
195.447 272.31 mo
195.195 273.08 195.615 273.91 196.386 274.162 cv
197.156 274.414 197.986 273.994 198.238 273.225 cv
198.49 272.453 198.07 271.623 197.3 271.371 cv
196.529 271.119 195.699 271.539 195.447 272.31 cv
cp
f
198.261 277.867 mo
198.009 278.639 198.429 279.469 199.201 279.721 cv
199.972 279.973 200.802 279.553 201.054 278.781 cv
201.306 278.012 200.886 277.182 200.115 276.93 cv
199.343 276.678 198.515 277.098 198.261 277.867 cv
cp
f
194.076 276.496 mo
193.822 277.268 194.244 278.098 195.013 278.35 cv
195.784 278.602 196.615 278.182 196.867 277.41 cv
197.119 276.641 196.699 275.81 195.927 275.557 cv
195.158 275.305 194.328 275.725 194.076 276.496 cv
cp
f
196.89 282.055 mo
196.638 282.826 197.058 283.654 197.83 283.908 cv
198.599 284.16 199.429 283.74 199.683 282.969 cv
199.935 282.197 199.515 281.369 198.744 281.117 cv
197.972 280.863 197.142 281.283 196.89 282.055 cv
cp
f
192.703 280.684 mo
192.451 281.453 192.871 282.283 193.642 282.535 cv
194.414 282.789 195.242 282.367 195.496 281.598 cv
195.748 280.826 195.328 279.998 194.556 279.744 cv
193.787 279.492 192.956 279.912 192.703 280.684 cv
cp
f
195.519 286.242 mo
195.267 287.012 195.687 287.842 196.456 288.096 cv
197.228 288.348 198.058 287.928 198.31 287.156 cv
198.564 286.385 198.142 285.555 197.373 285.303 cv
196.601 285.051 195.771 285.471 195.519 286.242 cv
cp
f
191.331 284.871 mo
191.08 285.641 191.499 286.471 192.271 286.723 cv
193.04 286.977 193.871 286.555 194.123 285.785 cv
194.376 285.014 193.956 284.184 193.185 283.932 cv
192.414 283.68 191.585 284.1 191.331 284.871 cv
cp
f
194.111 290.432 mo
193.859 291.201 194.279 292.031 195.05 292.283 cv
195.822 292.537 196.65 292.115 196.904 291.346 cv
197.156 290.574 196.736 289.744 195.964 289.492 cv
195.193 289.24 194.363 289.66 194.111 290.432 cv
cp
f
189.923 289.059 mo
189.671 289.83 190.093 290.66 190.863 290.912 cv
191.634 291.164 192.464 290.744 192.716 289.973 cv
192.968 289.203 192.548 288.373 191.776 288.121 cv
191.007 287.869 190.177 288.289 189.923 289.059 cv
cp
f
192.74 294.617 mo
192.488 295.389 192.908 296.219 193.679 296.471 cv
194.449 296.723 195.279 296.303 195.531 295.531 cv
195.784 294.762 195.362 293.932 194.593 293.68 cv
193.822 293.426 192.992 293.846 192.74 294.617 cv
cp
f
188.552 293.246 mo
188.3 294.018 188.72 294.848 189.492 295.1 cv
190.263 295.352 191.091 294.932 191.345 294.16 cv
191.597 293.389 191.177 292.56 190.406 292.309 cv
189.634 292.055 188.806 292.475 188.552 293.246 cv
cp
f
138.458 306.602 mo
143.078 305.086 li
153.283 301.738 li
139.064 258.398 li
128.857 261.746 li
124.242 263.264 li
138.458 306.602 li
cp
0 0 0 rgb
f
131.013 268.447 mo
140.992 298.863 li
141.341 299.928 142.486 300.508 143.55 300.158 cv
151.894 297.508 li
140.652 263.24 li
132.308 265.889 li
131.243 266.238 130.664 267.383 131.013 268.447 cv
cp
1 1 1 rgb
f
134.695 271.857 mo
133.873 269.361 li
141.775 266.764 li
142.597 269.26 li
134.695 271.857 li
cp
.74902 .0392157 .188235 rgb
f
136.337 276.852 mo
135.517 274.355 li
143.419 271.756 li
144.24 274.252 li
136.337 276.852 li
cp
f
137.98 281.846 mo
137.158 279.35 li
145.062 276.75 li
145.882 279.246 li
137.98 281.846 li
cp
f
139.623 286.84 mo
138.802 284.344 li
146.705 281.742 li
147.525 284.24 li
139.623 286.84 li
cp
f
141.265 291.834 mo
140.445 289.338 li
148.347 286.738 li
149.167 289.234 li
141.265 291.834 li
cp
f
142.91 296.828 mo
142.087 294.332 li
149.99 291.73 li
150.812 294.227 li
142.91 296.828 li
cp
f
153.283 301.738 mo
157.9 300.223 li
143.681 256.883 li
139.064 258.398 li
140.652 263.24 li
151.894 297.508 li
153.283 301.738 li
cp
.0352941 .188235 .431373 rgb
f
112.499 112.499 mo
0 112.499 li
0 0 li
112.499 0 li
112.499 112.499 li
cp
.827451 .854902 .909804 rgb
f
92.0273 87.6387 mo
86.0068 93.6602 li
82.6494 90.3027 li
88.6714 84.2822 li
92.0273 87.6387 li
cp
0 0 0 rgb
f
48.2788 67.25 mo
49.666 68.6348 51.3066 69.6074 53.0498 70.1875 cv
53.9536 70.5371 54.8076 71.0605 55.5371 71.791 cv
56.7178 72.9707 57.3892 74.459 57.5771 75.998 cv
57.6538 80.1016 59.2524 84.1836 62.3848 87.3145 cv
68.8052 93.7344 79.2163 93.7344 85.6367 87.3145 cv
48.2788 49.957 li
43.5044 54.7324 43.5044 62.4727 48.2788 67.25 cv
cp
.85098 .431373 .517647 rgb
f
62.3848 87.3145 mo
59.2524 84.1836 57.6538 80.1016 57.5771 75.998 cv
57.3892 74.459 56.7178 72.9707 55.5371 71.791 cv
54.8076 71.0605 53.9536 70.5371 53.0498 70.1875 cv
51.3066 69.6074 49.666 68.6348 48.2788 67.25 cv
43.5044 62.4727 43.5044 54.7324 48.2788 49.957 cv
85.6367 87.3145 li
79.2163 93.7344 68.8052 93.7344 62.3848 87.3145 cv
cp
74.5366 57.1094 mo
73.4312 56.9629 72.4321 56.4727 71.6436 55.6836 cv
71.0254 55.0645 70.5913 54.3203 70.3555 53.4707 cv
70.1641 52.7852 li
70.0254 52.6777 li
69.3125 51.0977 68.3267 49.6738 67.0903 48.4355 cv
61.4849 42.8301 52.3647 42.8301 46.7583 48.4355 cv
41.1538 54.043 41.1533 63.1621 46.7583 68.7676 cv
48.3257 70.3359 50.1953 71.4922 52.3164 72.209 cv
52.9741 72.4688 53.5464 72.8379 54.0176 73.3105 cv
54.7891 74.082 55.2764 75.0664 55.4312 76.1602 cv
55.5508 80.9492 57.4775 85.4473 60.8652 88.834 cv
68.1133 96.082 79.9082 96.082 87.1567 88.834 cv
94.4053 81.5859 94.4053 69.791 87.1563 62.543 cv
83.7847 59.1699 79.3066 57.2461 74.5366 57.1094 cv
cp
.0352941 .188235 .431373 rgb
f
15.6323 22.252 mo
11.144 26.7402 li
9.7627 25.3574 li
14.2524 20.8711 li
15.6323 22.252 li
cp
0 0 0 rgb
f
18.3955 25.0137 mo
13.9063 29.502 li
12.5259 28.1211 li
17.0146 23.6328 li
18.3955 25.0137 li
cp
f
21.1685 27.7871 mo
16.6797 32.2754 li
15.2988 30.8945 li
19.7876 26.4063 li
21.1685 27.7871 li
cp
f
59.124 55.5762 mo
53.8975 60.8027 li
23.2324 30.1367 li
28.46 24.9102 li
59.124 55.5762 li
cp
.74902 .0392157 .188235 rgb
f
61.8696 55.3613 mo
64.1304 57.623 64.1294 61.2871 61.8687 63.5488 cv
59.6094 65.8066 55.9443 65.8086 53.6836 63.5488 cv
51.4233 61.2871 51.4243 57.623 53.6841 55.3613 cv
55.9443 53.1016 59.6094 53.1016 61.8696 55.3613 cv
cp
0 0 0 rgb
f
29.4316 23.9395 mo
22.2612 31.1094 li
9.84619 20.9531 li
19.2759 11.5234 li
29.4316 23.9395 li
cp
.0352941 .188235 .431373 rgb
f
33.3691 29.8203 mo
28.1416 35.0469 li
26.7603 33.666 li
31.9883 28.4395 li
33.3691 29.8203 li
cp
.866667 .866667 .866667 rgb
f
38.2788 34.7305 mo
33.0518 39.957 li
31.6704 38.5742 li
36.897 33.3477 li
38.2788 34.7305 li
cp
f
43.188 39.6387 mo
37.9609 44.8652 li
36.5801 43.4844 li
41.8071 38.2578 li
43.188 39.6387 li
cp
f
48.0972 44.5488 mo
42.8706 49.7754 li
41.4897 48.3945 li
46.7173 43.168 li
48.0972 44.5488 li
cp
f
53.0073 49.459 mo
47.7798 54.6855 li
46.3989 53.3027 li
51.6265 48.0781 li
53.0073 49.459 li
cp
f
79.2456 71.9375 mo
70.2578 80.9238 li
68.1006 78.7656 li
77.0879 69.7793 li
79.2456 71.9375 li
cp
0 0 0 rgb
f
18.1519 18.3516 mo
18.5601 18.7598 18.5601 19.4219 18.1519 19.8301 cv
17.7432 20.2383 17.0815 20.2383 16.6733 19.8301 cv
16.2656 19.4219 16.2646 18.7598 16.6733 18.3516 cv
17.0815 17.9434 17.7437 17.9434 18.1519 18.3516 cv
cp
1 1 1 rgb
f
20.9136 21.1133 mo
21.3218 21.5215 21.3218 22.1836 20.9136 22.5918 cv
20.5049 23 19.8433 23 19.4351 22.5918 cv
19.0278 22.1836 19.0269 21.5215 19.4351 21.1133 cv
19.8442 20.7051 20.5054 20.7051 20.9136 21.1133 cv
cp
f
23.686 23.8867 mo
24.0952 24.2949 24.0952 24.9551 23.686 25.3633 cv
23.2778 25.7734 22.6167 25.7734 22.209 25.3633 cv
21.8008 24.9551 21.8003 24.2949 22.2085 23.8867 cv
22.6172 23.4766 23.2788 23.4785 23.686 23.8867 cv
cp
f
450 112.499 mo
337.5 112.499 li
337.5 0 li
450 0 li
450 112.499 li
cp
f
360.531 57.2495 mo
360.531 75.3892 375.236 90.0928 393.375 90.0928 cv
393.375 24.4063 li
375.236 24.4063 360.531 39.1113 360.531 57.2495 cv
cp
.866667 .866667 .866667 rgb
f
393.375 24.4063 mo
393.375 90.0928 li
411.514 90.0928 426.219 75.3892 426.219 57.2495 cv
426.219 39.1113 411.514 24.4063 393.375 24.4063 cv
cp
.65098 .65098 .65098 rgb
f
400.889 57.2505 mo
400.889 61.3994 397.523 64.7627 393.375 64.7627 cv
389.225 64.7627 385.863 61.3994 385.863 57.2505 cv
385.863 53.1006 389.225 49.7378 393.375 49.7378 cv
397.523 49.7378 400.889 53.1006 400.889 57.2505 cv
cp
.317647 .105882 .313726 rgb
f
395.303 57.2495 mo
395.303 58.3149 394.439 59.1782 393.375 59.1782 cv
392.309 59.1782 391.445 58.3149 391.445 57.2495 cv
391.445 56.1851 392.309 55.3213 393.375 55.3213 cv
394.439 55.3213 395.303 56.1851 395.303 57.2495 cv
cp
0 0 0 rgb
f
393.375 86.1904 mo
380.641 86.1904 369.807 77.9185 365.947 66.4697 cv
364.822 66.5806 li
368.758 78.5913 380.066 87.2925 393.375 87.2925 cv
406.685 87.2925 417.998 78.5859 421.93 66.5703 cv
420.803 66.4595 li
416.947 77.9141 406.113 86.1904 393.375 86.1904 cv
cp
.85098 .431373 .517647 rgb
f
393.375 28.3096 mo
406.105 28.3096 416.934 36.5767 420.797 48.021 cv
421.922 47.9097 li
417.984 35.9043 406.68 27.2075 393.375 27.2075 cv
380.066 27.2075 368.758 35.9087 364.822 47.9194 cv
365.947 48.0308 li
369.809 36.5811 380.641 28.3096 393.375 28.3096 cv
cp
f
393.375 34.8765 mo
402.682 34.8765 410.676 40.5894 414.043 48.6895 cv
415.184 48.5771 li
411.727 39.9141 403.256 33.7744 393.375 33.7744 cv
383.49 33.7744 375.018 39.9189 371.563 48.5874 cv
372.703 48.6992 li
376.068 40.5933 384.066 34.8765 393.375 34.8765 cv
cp
f
393.375 79.623 mo
384.066 79.623 376.068 73.9058 372.703 65.7998 cv
371.563 65.9131 li
375.018 74.5811 383.49 80.7251 393.375 80.7251 cv
403.264 80.7251 411.738 74.5767 415.191 65.9033 cv
414.051 65.79 li
410.688 73.9023 402.689 79.623 393.375 79.623 cv
cp
f
393.375 72.9072 mo
387.598 72.9072 382.545 69.7603 379.832 65.0938 cv
378.631 65.2119 li
381.469 70.4473 387.014 74.0098 393.375 74.0098 cv
399.738 74.0098 405.287 70.4424 408.123 65.2026 cv
406.922 65.084 li
404.211 69.7563 399.154 72.9072 393.375 72.9072 cv
cp
f
393.375 41.5923 mo
399.146 41.5923 404.195 44.7349 406.912 49.397 cv
408.113 49.2773 li
405.273 44.0483 399.732 40.4907 393.375 40.4907 cv
387.014 40.4907 381.469 44.0527 378.631 49.2871 cv
379.832 49.4063 li
382.545 44.7397 387.598 41.5923 393.375 41.5923 cv
cp
f
393.377 47.9961 mo
395.629 47.9961 397.695 48.8071 399.301 50.1499 cv
400.764 50.0059 li
398.883 48.0884 396.268 46.8936 393.377 46.8936 cv
390.478 46.8936 387.859 48.0918 385.978 50.0156 cv
387.439 50.1602 li
389.047 48.811 391.117 47.9961 393.377 47.9961 cv
cp
f
393.377 66.5034 mo
391.117 66.5034 389.047 65.6885 387.439 64.3394 cv
385.978 64.4854 li
387.859 66.4082 390.48 67.606 393.377 67.606 cv
396.275 67.606 398.898 66.4038 400.779 64.4751 cv
399.322 64.3306 li
397.711 65.6846 395.639 66.5034 393.377 66.5034 cv
cp
f
364.822 47.9194 mo
361.961 47.6357 li
361.961 47.6357 360.531 51.626 360.531 57.2495 cv
360.531 63.0254 361.961 66.8643 361.961 66.8643 cv
364.822 66.5806 li
363.859 63.6411 363.332 60.5073 363.332 57.2505 cv
363.332 53.9932 363.859 50.8584 364.822 47.9194 cv
cp
1 1 1 rgb
f
385.863 57.2505 mo
385.863 52.3838 390.211 50.4346 390.211 50.4346 cv
387.439 50.1602 li
385.412 51.8589 384.121 54.4058 384.121 57.249 cv
384.121 60.0942 385.412 62.6411 387.439 64.3394 cv
390.211 64.0649 li
390.211 64.0649 385.863 62.147 385.863 57.2505 cv
cp
f
364.434 57.2505 mo
364.434 54.0269 364.973 50.9287 365.947 48.0308 cv
364.822 47.9194 li
363.859 50.8584 363.332 53.9932 363.332 57.2505 cv
363.332 60.5073 363.859 63.6411 364.822 66.5806 cv
365.947 66.4697 li
364.973 63.5708 364.434 60.4731 364.434 57.2505 cv
cp
.909804 .658824 .709804 rgb
f
371.563 48.5874 mo
369.377 48.3701 li
368.246 48.2583 li
365.947 48.0308 li
364.973 50.9287 364.434 54.0269 364.434 57.2505 cv
364.434 60.4731 364.973 63.5708 365.947 66.4697 cv
368.246 66.2412 li
369.377 66.1289 li
371.563 65.9131 li
370.494 63.2305 369.898 60.3091 369.898 57.2495 cv
369.898 54.1904 370.494 51.269 371.563 48.5874 cv
cp
1 1 1 rgb
f
371.002 57.2495 mo
371.002 54.2227 371.609 51.3359 372.703 48.6992 cv
371.563 48.5874 li
370.494 51.269 369.898 54.1904 369.898 57.2495 cv
369.898 60.3091 370.494 63.2305 371.563 65.9131 cv
372.703 65.7998 li
371.609 63.1641 371.002 60.2769 371.002 57.2495 cv
cp
.909804 .658824 .709804 rgb
f
378.631 49.2871 mo
376.275 49.0537 li
375.119 48.9395 li
372.703 48.6992 li
371.609 51.3359 371.002 54.2227 371.002 57.2495 cv
371.002 60.2769 371.609 63.1641 372.703 65.7998 cv
375.119 65.561 li
376.275 65.4463 li
378.631 65.2119 li
377.346 62.8428 376.615 60.1304 376.615 57.2495 cv
376.615 54.3696 377.346 51.6572 378.631 49.2871 cv
cp
1 1 1 rgb
f
377.717 57.2495 mo
377.717 54.3936 378.49 51.7139 379.832 49.4063 cv
378.631 49.2871 li
377.346 51.6572 376.615 54.3696 376.615 57.2495 cv
376.615 60.1304 377.346 62.8428 378.631 65.2119 cv
379.832 65.0938 li
378.49 62.7852 377.717 60.1064 377.717 57.2495 cv
cp
.909804 .658824 .709804 rgb
f
385.978 50.0156 mo
383.412 49.7607 li
382.148 49.6357 li
379.832 49.4063 li
378.49 51.7139 377.717 54.3936 377.717 57.2495 cv
377.717 60.1064 378.49 62.7852 379.832 65.0938 cv
382.148 64.8638 li
383.412 64.7388 li
385.978 64.4854 li
384.15 62.6167 383.018 60.0635 383.018 57.249 cv
383.018 54.436 384.15 51.8838 385.978 50.0156 cv
cp
1 1 1 rgb
f
384.121 57.249 mo
384.121 54.4058 385.412 51.8589 387.439 50.1602 cv
385.978 50.0156 li
384.15 51.8838 383.018 54.436 383.018 57.249 cv
383.018 60.0635 384.15 62.6167 385.978 64.4854 cv
387.439 64.3394 li
385.412 62.6411 384.121 60.0942 384.121 57.249 cv
cp
.909804 .658824 .709804 rgb
f
400.889 57.2397 mo
400.889 62.106 396.539 64.0552 396.539 64.0552 cv
399.322 64.3306 li
401.342 62.6318 402.629 60.0894 402.629 57.249 cv
402.629 54.4004 401.334 51.8501 399.301 50.1499 cv
396.539 50.4243 li
396.539 50.4243 400.889 52.3423 400.889 57.2397 cv
cp
.866667 .866667 .866667 rgb
f
426.219 57.2397 mo
426.219 51.4644 424.789 47.6255 424.789 47.6255 cv
421.922 47.9097 li
422.889 50.8516 423.416 53.9893 423.416 57.2505 cv
423.416 60.5034 422.889 63.6348 421.93 66.5703 cv
424.789 66.8535 li
424.789 66.8535 426.219 62.8638 426.219 57.2397 cv
cp
f
421.922 47.9097 mo
420.797 48.021 li
421.775 50.9224 422.314 54.0234 422.314 57.2505 cv
422.314 60.4692 421.777 63.564 420.803 66.4595 cv
421.93 66.5703 li
422.889 63.6348 423.416 60.5034 423.416 57.2505 cv
423.416 53.9893 422.889 50.8516 421.922 47.9097 cv
cp
.909804 .658824 .709804 rgb
f
420.797 48.021 mo
418.498 48.2485 li
417.367 48.3604 li
415.184 48.5771 li
416.256 51.2622 416.852 54.1865 416.852 57.2495 cv
416.852 60.3057 416.258 63.2241 415.191 65.9033 cv
417.375 66.1196 li
418.506 66.2314 li
420.803 66.4595 li
421.777 63.564 422.314 60.4692 422.314 57.2505 cv
422.314 54.0234 421.775 50.9224 420.797 48.021 cv
cp
.866667 .866667 .866667 rgb
f
415.184 48.5771 mo
414.043 48.6895 li
415.141 51.3291 415.748 54.2192 415.748 57.2495 cv
415.748 60.2734 415.143 63.1572 414.051 65.79 cv
415.191 65.9033 li
416.258 63.2241 416.852 60.3057 416.852 57.2495 cv
416.852 54.1865 416.256 51.2622 415.184 48.5771 cv
cp
.909804 .658824 .709804 rgb
f
414.043 48.6895 mo
411.627 48.9292 li
410.469 49.0444 li
408.113 49.2773 li
409.402 51.6494 410.133 54.3657 410.133 57.2495 cv
410.133 60.126 409.404 62.835 408.123 65.2026 cv
410.478 65.436 li
411.637 65.5508 li
414.051 65.79 li
415.143 63.1572 415.748 60.2734 415.748 57.2495 cv
415.748 54.2192 415.141 51.3291 414.043 48.6895 cv
cp
.866667 .866667 .866667 rgb
f
408.113 49.2773 mo
406.912 49.397 li
408.258 51.707 409.031 54.3887 409.031 57.2495 cv
409.031 60.103 408.262 62.7778 406.922 65.084 cv
408.123 65.2026 li
409.404 62.835 410.133 60.126 410.133 57.2495 cv
410.133 54.3657 409.402 51.6494 408.113 49.2773 cv
cp
.909804 .658824 .709804 rgb
f
406.912 49.397 mo
404.596 49.6265 li
403.33 49.7505 li
400.764 50.0059 li
402.596 51.875 403.732 54.4312 403.732 57.249 cv
403.732 60.0596 402.603 62.6074 400.779 64.4751 cv
403.346 64.7295 li
404.609 64.8545 li
406.922 65.084 li
408.262 62.7778 409.031 60.103 409.031 57.2495 cv
409.031 54.3887 408.258 51.707 406.912 49.397 cv
cp
.866667 .866667 .866667 rgb
f
400.764 50.0059 mo
399.301 50.1499 li
401.334 51.8501 402.629 54.4004 402.629 57.249 cv
402.629 60.0894 401.342 62.6318 399.322 64.3306 cv
400.779 64.4751 li
402.603 62.6074 403.732 60.0596 403.732 57.249 cv
403.732 54.4312 402.596 51.875 400.764 50.0059 cv
cp
.909804 .658824 .709804 rgb
f
112.499 225.001 mo
0 225.001 li
0 112.499 li
112.499 112.499 li
112.499 225.001 li
cp
1 1 1 rgb
f
79.9346 179.262 mo
74.5068 179.262 70.0293 183.677 69.9551 189.109 cv
69.9541 189.244 li
69.9541 189.284 69.9541 201.725 69.9536 201.877 cv
69.8984 205.888 66.5894 209.152 62.5771 209.152 cv
58.5093 209.152 55.2002 205.842 55.2002 201.773 cv
55.2002 201.054 54.6177 200.472 53.8984 200.472 cv
53.1797 200.472 52.5972 201.054 52.5972 201.773 cv
52.5972 207.277 57.0737 211.756 62.5771 211.756 cv
68.0049 211.756 72.4829 207.34 72.5571 201.908 cv
72.5576 201.869 72.5576 194.999 72.5576 189.244 cv
72.5576 189.14 li
72.6133 185.129 75.9229 181.865 79.9346 181.865 cv
84.002 181.865 87.311 185.175 87.311 189.244 cv
87.311 189.963 87.8945 190.545 88.6133 190.545 cv
89.332 190.545 89.915 189.963 89.915 189.244 cv
89.915 183.74 85.438 179.262 79.9346 179.262 cv
cp
.74902 .0392157 .188235 rgb
f
42.832 150.401 mo
45.2607 153.911 49.3042 156.218 53.8984 156.218 cv
53.9297 156.218 53.9595 156.213 53.9912 156.213 cv
53.9912 150.401 li
42.832 150.401 li
cp
.866667 .866667 .866667 rgb
f
53.9912 144.396 mo
40.5322 144.396 li
40.8047 146.611 41.6221 148.653 42.832 150.401 cv
53.9912 150.401 li
53.9912 144.396 li
cp
.85098 .431373 .517647 rgb
f
64.9629 150.401 mo
66.1748 148.653 66.9922 146.612 67.2646 144.396 cv
53.9912 144.396 li
53.9912 150.401 li
64.9629 150.401 li
cp
.74902 .0392157 .188235 rgb
f
53.9912 150.401 mo
53.9912 156.213 li
58.5449 156.182 62.5498 153.886 64.9629 150.401 cv
53.9912 150.401 li
cp
.65098 .65098 .65098 rgb
f
53.9912 129.266 mo
53.9595 129.266 53.9297 129.261 53.8984 129.261 cv
47.0171 129.261 41.3501 134.422 40.5322 141.083 cv
53.9912 141.083 li
53.9912 129.266 li
cp
.85098 .431373 .517647 rgb
f
53.9912 141.083 mo
40.5322 141.083 li
40.4653 141.626 40.4199 142.178 40.4199 142.74 cv
40.4199 143.302 40.4653 143.852 40.5322 144.396 cv
53.9912 144.396 li
53.9912 141.083 li
cp
.866667 .866667 .866667 rgb
f
67.2646 141.083 mo
66.4502 134.452 60.8296 129.313 53.9912 129.266 cv
53.9912 141.083 li
67.2646 141.083 li
cp
.74902 .0392157 .188235 rgb
f
67.2646 141.083 mo
53.9912 141.083 li
53.9912 144.396 li
67.2646 144.396 li
67.3315 143.852 67.3774 143.302 67.3774 142.74 cv
67.3774 142.178 67.3315 141.626 67.2646 141.083 cv
cp
.65098 .65098 .65098 rgb
f
53.8984 167.691 mo
46.7446 167.691 li
46.8994 171.005 li
53.8984 171.005 li
53.8984 167.691 li
cp
.866667 .866667 .866667 rgb
f
53.8984 153.715 mo
46.0903 153.715 li
46.7446 167.691 li
53.8984 167.691 li
53.8984 153.715 li
cp
.0352941 .188235 .431373 rgb
f
61.0522 167.691 mo
61.707 153.715 li
53.8984 153.715 li
53.8984 167.691 li
61.0522 167.691 li
cp
0 0 0 rgb
f
53.8984 201.773 mo
59.0542 201.773 li
60.8965 171.005 li
53.8984 171.005 li
53.8984 201.773 li
cp
f
46.8994 171.005 mo
48.7417 201.773 li
53.8984 201.773 li
53.8984 171.005 li
46.8994 171.005 li
cp
.0352941 .188235 .431373 rgb
f
53.8984 167.691 mo
53.8984 171.005 li
60.8965 171.005 li
61.0522 167.691 li
53.8984 167.691 li
cp
.65098 .65098 .65098 rgb
f
225 225.001 mo
112.499 225.001 li
112.499 112.499 li
225 112.499 li
225 225.001 li
cp
.827451 .854902 .909804 rgb
f
155.465 188.719 mo
133.815 188.719 li
133.815 156.411 li
155.465 157.157 li
155.465 188.719 li
cp
.0352941 .188235 .431373 rgb
f
203.684 188.719 mo
196.053 188.719 li
155.465 188.719 li
155.465 156.411 li
203.684 156.411 li
203.684 188.719 li
cp
0 0 0 rgb
f
173.243 188.719 mo
165.614 188.719 li
165.614 156.411 li
173.243 156.411 li
173.243 188.719 li
cp
1 1 1 rgb
f
183.391 188.719 mo
175.76 188.719 li
175.76 156.411 li
183.391 156.411 li
183.391 188.719 li
cp
f
163.096 188.719 mo
155.465 188.719 li
155.465 156.411 li
163.096 156.411 li
163.096 188.719 li
cp
f
193.539 188.719 mo
185.907 188.719 li
185.907 156.411 li
193.539 156.411 li
193.539 188.719 li
cp
f
203.684 188.719 mo
196.053 188.719 li
196.053 156.411 li
203.684 156.411 li
203.684 188.719 li
cp
f
171.336 172.484 mo
167.52 172.484 li
167.52 156.411 li
171.336 156.411 li
171.336 172.484 li
cp
.85098 .431373 .517647 rgb
f
161.189 172.484 mo
157.373 172.484 li
157.373 156.411 li
161.189 156.411 li
161.189 172.484 li
cp
f
201.779 172.484 mo
197.961 172.484 li
197.961 156.411 li
201.779 156.411 li
201.779 172.484 li
cp
f
191.629 172.484 mo
187.815 172.484 li
187.815 156.411 li
191.629 156.411 li
191.629 172.484 li
cp
f
152.055 166.844 mo
152.055 178.287 li
137.091 178.287 li
137.091 166.844 li
152.055 166.844 li
cp
f
211.315 188.719 mo
203.684 188.719 li
203.684 148.781 li
211.315 148.781 li
211.315 188.719 li
cp
.317647 .105882 .313726 rgb
f
133.815 188.719 mo
126.185 188.719 li
126.185 148.781 li
133.815 148.781 li
133.815 188.719 li
cp
f
148.241 170.577 mo
148.241 174.391 li
140.558 174.391 li
140.558 170.577 li
148.241 170.577 li
cp
1 1 1 rgb
f
161.189 156.411 mo
163.096 156.37 li
163.096 174.391 li
161.189 172.484 li
161.189 156.411 li
cp
.65098 .65098 .65098 rgb
f
171.357 156.411 mo
173.264 156.37 li
173.264 174.391 li
171.357 172.484 li
171.357 156.411 li
cp
f
191.629 156.411 mo
193.539 156.37 li
193.539 174.391 li
191.629 172.484 li
191.629 156.411 li
cp
f
201.779 156.411 mo
203.684 156.37 li
203.684 174.391 li
201.779 172.484 li
201.779 156.411 li
cp
f
140.558 174.391 mo
144.454 178.287 li
152.055 178.287 li
152.055 174.391 li
148.241 170.577 li
148.241 174.391 li
140.558 174.391 li
cp
.74902 .0392157 .188235 rgb
f
203.684 157.157 mo
133.815 157.157 li
133.815 148.781 li
203.684 148.781 li
203.684 157.157 li
cp
0 0 0 rgb
f
337.5 450 mo
225 450 li
225 337.5 li
337.5 337.5 li
337.5 450 li
cp
1 1 1 rgb
f
294.398 393.381 mo
294.145 393.164 li
294.145 423.863 li
294.145 429.027 289.945 433.227 284.781 433.227 cv
279.617 433.227 275.416 429.027 275.416 423.863 cv
275.463 423.334 li
278.352 354.662 li
277.148 355.248 275.898 355.758 274.607 356.176 cv
274.615 356.176 274.623 356.174 274.631 356.174 cv
268.543 424.037 li
268.543 433.029 275.859 440.348 284.855 440.348 cv
293.85 440.348 301.166 433.029 301.166 424.037 cv
301.166 400.148 li
301.166 396.412 298.137 393.381 294.398 393.381 cv
cp
1 .74902 .439216 rgb
f
287.631 387.586 mo
287.631 424.037 li
287.631 425.566 286.385 426.81 284.855 426.81 cv
283.326 426.81 282.08 425.566 282.08 424.037 cv
282.08 355.441 li
282.08 354.52 281.893 353.641 281.559 352.84 cv
280.539 350.395 278.127 348.674 275.313 348.674 cv
274.883 348.674 274.553 348.719 274.291 348.795 cv
270.879 348.914 268.842 349.393 267.207 350.219 cv
265.707 350.977 265.039 351.783 262.301 352.307 cv
260.521 352.647 258.896 352.887 256.932 352.629 cv
254.939 352.369 251.953 351.23 247.883 351.23 cv
247.883 351.297 li
247.883 353.693 li
250.252 353.693 251.51 354.018 252.805 354.463 cv
253.031 354.541 253.258 354.621 253.492 354.705 cv
254.471 355.057 255.781 355.701 257.244 356.273 cv
259.904 357.102 262.73 357.549 265.656 357.56 cv
265.766 357.56 265.873 357.56 265.977 357.559 cv
266.215 357.557 266.447 357.549 266.684 357.541 cv
269.439 357.455 272.098 356.986 274.607 356.176 cv
275.934 355.748 277.215 355.219 278.449 354.611 cv
278.418 354.627 278.385 354.647 278.352 354.662 cv
275.463 423.334 li
275.416 423.863 li
275.416 429.027 279.617 433.227 284.781 433.227 cv
289.945 433.227 294.145 429.027 294.145 423.863 cv
294.145 393.164 li
287.631 387.586 li
cp
.890196 .490196 0 rgb
f
306.691 400.373 mo
303.43 403.635 li
285.266 385.471 li
288.529 382.207 li
306.691 400.373 li
cp
f
285.31 360.935 mo
285.31 359.15 283.863 357.705 282.08 357.705 cv
282.08 364.166 li
283.863 364.166 285.31 362.721 285.31 360.935 cv
cp
f
278.85 360.935 mo
278.85 362.721 280.295 364.166 282.08 364.166 cv
282.08 357.705 li
280.295 357.705 278.85 359.15 278.85 360.935 cv
cp
.623529 .607843 .2 rgb
f
285.31 370.549 mo
285.31 368.766 283.863 367.32 282.08 367.32 cv
282.08 373.779 li
283.863 373.779 285.31 372.334 285.31 370.549 cv
cp
.890196 .490196 0 rgb
f
278.85 370.549 mo
278.85 372.334 280.295 373.779 282.08 373.779 cv
282.08 367.32 li
280.295 367.32 278.85 368.766 278.85 370.549 cv
cp
.623529 .607843 .2 rgb
f
285.31 380.24 mo
285.31 378.455 283.863 377.01 282.08 377.01 cv
282.08 383.471 li
283.863 383.471 285.31 382.025 285.31 380.24 cv
cp
.890196 .490196 0 rgb
f
278.85 380.24 mo
278.85 382.025 280.295 383.471 282.08 383.471 cv
282.08 377.01 li
280.295 377.01 278.85 378.455 278.85 380.24 cv
cp
.623529 .607843 .2 rgb
f
285.31 389.855 mo
285.31 388.07 283.863 386.625 282.08 386.625 cv
282.08 393.086 li
283.863 393.086 285.31 391.639 285.31 389.855 cv
cp
.890196 .490196 0 rgb
f
278.85 389.855 mo
278.85 391.639 280.295 393.086 282.08 393.086 cv
282.08 386.625 li
280.295 386.625 278.85 388.07 278.85 389.855 cv
cp
.623529 .607843 .2 rgb
f
278.85 399.545 mo
278.85 401.33 280.295 402.775 282.08 402.775 cv
282.08 396.315 li
280.295 396.315 278.85 397.762 278.85 399.545 cv
cp
f
285.31 399.545 mo
285.31 397.762 283.863 396.315 282.08 396.315 cv
282.08 402.775 li
283.863 402.775 285.31 401.33 285.31 399.545 cv
cp
.890196 .490196 0 rgb
f
285.31 409.16 mo
285.31 407.375 283.863 405.93 282.08 405.93 cv
282.08 412.391 li
283.863 412.391 285.31 410.943 285.31 409.16 cv
cp
f
278.85 409.16 mo
278.85 410.943 280.295 412.391 282.08 412.391 cv
282.08 405.93 li
280.295 405.93 278.85 407.375 278.85 409.16 cv
cp
.623529 .607843 .2 rgb
f
450 225.001 mo
337.5 225.001 li
337.5 112.499 li
450 112.499 li
450 225.001 li
cp
.827451 .854902 .909804 rgb
f
414.414 204.564 mo
410.996 204.308 407.65 202.877 405.021 200.248 cv
400.9 196.126 399.84 185.929 396.685 182.895 cv
394.213 180.52 391.041 181.091 389.732 179.783 cv
388.855 178.905 388.855 177.683 389.162 176.914 cv
389.225 176.756 389.297 176.609 389.381 176.498 cv
390.322 175.255 391.439 175.34 391.935 175.344 cv
394.002 175.367 395.764 174.833 397.685 172.878 cv
397.75 172.813 397.82 172.743 397.891 172.673 cv
394.902 169.686 li
394.66 169.925 394.273 170.287 393.957 170.604 cv
393.896 170.665 393.83 170.718 393.768 170.778 cv
390.65 173.725 386.049 173.985 382.992 170.928 cv
382.557 170.492 381.582 170.115 380.713 170.604 cv
380.006 171.001 379.603 171.782 379.689 172.452 cv
380.07 175.401 381.514 178.213 383.863 180.532 cv
387.924 184.54 392.088 183.419 394.154 185.504 cv
397.98 189.365 396.06 197.198 402.693 203.831 cv
405.727 206.865 409.527 208.614 413.457 209.104 cv
418.961 209.789 424.719 207.998 428.975 203.757 cv
425.781 200.562 li
422.588 203.523 418.451 204.866 414.414 204.564 cv
cp
.85098 .431373 .517647 rgb
f
410.773 168.885 mo
408.688 166.819 409.807 162.656 405.801 158.596 cv
403.48 156.244 400.67 154.801 397.721 154.421 cv
397.049 154.335 396.268 154.737 395.871 155.445 cv
395.383 156.314 395.762 157.289 396.197 157.725 cv
399.314 160.843 398.99 165.572 395.871 168.689 cv
395.545 169.017 395.168 169.421 394.93 169.661 cv
394.922 169.668 394.91 169.677 394.902 169.686 cv
397.891 172.673 li
397.914 172.648 397.938 172.626 397.959 172.604 cv
398.145 172.42 398.307 172.263 398.307 172.263 cv
398.307 172.263 398.656 171.904 398.922 171.642 cv
400.877 169.72 401.41 167.958 401.387 165.893 cv
401.385 165.396 401.299 164.278 402.541 163.338 cv
403.197 162.841 404.768 162.63 405.826 163.689 cv
407.135 164.997 406.563 168.17 408.939 170.641 cv
411.902 173.723 421.697 174.809 425.99 178.697 cv
426.094 178.79 426.195 178.882 426.291 178.978 cv
426.551 179.238 426.795 179.507 427.031 179.781 cv
427.084 179.841 427.135 179.9 427.185 179.961 cv
427.412 180.23 427.629 180.505 427.832 180.786 cv
427.865 180.831 427.895 180.876 427.928 180.921 cv
428.109 181.18 428.283 181.442 428.447 181.708 cv
428.482 181.762 428.516 181.815 428.549 181.869 cv
428.725 182.162 428.889 182.46 429.041 182.762 cv
429.074 182.828 429.107 182.893 429.139 182.959 cv
429.281 183.249 429.416 183.544 429.537 183.84 cv
429.549 183.865 429.56 183.889 429.57 183.914 cv
429.699 184.23 429.81 184.549 429.916 184.87 cv
429.939 184.944 429.963 185.016 429.986 185.089 cv
430.084 185.41 430.176 185.732 430.252 186.056 cv
430.262 186.097 430.27 186.136 430.279 186.175 cv
430.346 186.476 430.404 186.779 430.455 187.083 cv
430.467 187.15 430.478 187.218 430.488 187.284 cv
430.535 187.612 430.574 187.939 430.602 188.268 cv
430.605 188.334 430.609 188.401 430.615 188.468 cv
430.635 188.773 430.646 189.076 430.65 189.382 cv
430.65 189.425 430.652 189.469 430.652 189.513 cv
430.65 189.845 430.639 190.178 430.615 190.509 cv
430.609 190.585 430.603 190.66 430.596 190.736 cv
430.568 191.069 430.533 191.404 430.482 191.736 cv
430.478 191.758 430.475 191.78 430.471 191.801 cv
430.422 192.118 430.359 192.433 430.289 192.748 cv
430.273 192.819 430.258 192.891 430.24 192.962 cv
430.164 193.285 430.076 193.606 429.978 193.924 cv
429.959 193.983 429.939 194.042 429.922 194.1 cv
429.828 194.388 429.727 194.673 429.615 194.956 cv
429.594 195.01 429.574 195.066 429.553 195.119 cv
429.428 195.43 429.289 195.736 429.141 196.04 cv
429.115 196.095 429.086 196.152 429.057 196.206 cv
428.344 197.631 427.396 198.97 426.205 200.161 cv
426.066 200.299 425.922 200.431 425.781 200.562 cv
428.975 203.757 li
428.982 203.748 428.992 203.741 429 203.732 cv
436.291 196.44 436.391 184.718 429.1 177.425 cv
422.465 170.792 414.633 172.712 410.773 168.885 cv
cp
.74902 .0392157 .188235 rgb
f
426.428 196.144 mo
426.428 196.144 425.461 189.603 422.873 187.016 cv
418.256 182.399 413.387 187.343 413.387 187.343 cv
413.387 187.343 412.963 187.777 412.348 188.404 cv
411.09 189.684 409.027 191.77 408.102 192.623 cv
407.746 192.952 407.105 193.435 406.258 193.34 cv
404.887 193.184 404.291 192.476 404.047 192.051 cv
402.449 189.271 401.92 184.548 398.631 181.529 cv
394.699 177.919 389.307 177.945 389.162 176.914 cv
388.855 177.683 388.855 178.905 389.732 179.783 cv
391.041 181.091 394.213 180.52 396.685 182.895 cv
399.84 185.929 400.9 196.126 405.021 200.248 cv
407.65 202.877 410.996 204.308 414.414 204.564 cv
418.631 204.879 422.961 203.404 426.205 200.161 cv
427.396 198.97 428.344 197.631 429.057 196.206 cv
428.326 197.569 426.895 197.244 426.428 196.144 cv
cp
0 0 0 rgb
f
425.99 178.697 mo
421.697 174.809 411.902 173.723 408.939 170.641 cv
406.563 168.17 407.135 164.997 405.826 163.689 cv
404.768 162.63 403.197 162.841 402.541 163.338 cv
401.299 164.278 401.385 165.396 401.387 165.893 cv
401.41 167.958 400.877 169.72 398.922 171.642 cv
398.656 171.904 398.307 172.263 398.307 172.263 cv
398.307 172.263 398.145 172.42 397.959 172.604 cv
397.869 172.694 397.771 172.79 397.685 172.878 cv
395.764 174.833 394.002 175.367 391.935 175.344 cv
391.439 175.34 390.322 175.255 389.381 176.498 cv
389.297 176.609 389.225 176.756 389.162 176.914 cv
389.307 177.945 394.699 177.919 398.631 181.529 cv
401.92 184.548 402.449 189.271 404.047 192.051 cv
404.291 192.476 404.887 193.184 406.258 193.34 cv
407.105 193.435 407.746 192.952 408.102 192.623 cv
409.027 191.77 411.09 189.684 412.348 188.404 cv
412.963 187.777 413.387 187.343 413.387 187.343 cv
413.387 187.343 418.256 182.399 422.873 187.016 cv
425.461 189.603 426.428 196.144 426.428 196.144 cv
426.895 197.244 428.326 197.569 429.057 196.206 cv
429.086 196.152 429.115 196.095 429.141 196.04 cv
429.289 195.736 429.428 195.43 429.553 195.119 cv
429.574 195.066 429.594 195.01 429.615 194.956 cv
429.727 194.673 429.828 194.388 429.922 194.1 cv
429.939 194.042 429.959 193.983 429.978 193.924 cv
430.076 193.606 430.164 193.285 430.24 192.962 cv
430.258 192.891 430.273 192.819 430.289 192.748 cv
430.359 192.433 430.422 192.118 430.471 191.801 cv
430.475 191.78 430.478 191.758 430.482 191.736 cv
430.533 191.404 430.568 191.069 430.596 190.736 cv
430.603 190.66 430.609 190.585 430.615 190.509 cv
430.639 190.178 430.65 189.845 430.652 189.513 cv
430.652 189.469 430.65 189.425 430.65 189.382 cv
430.646 189.076 430.635 188.773 430.615 188.468 cv
430.609 188.401 430.605 188.334 430.602 188.268 cv
430.574 187.939 430.535 187.612 430.488 187.284 cv
430.478 187.218 430.467 187.15 430.455 187.083 cv
430.404 186.779 430.346 186.476 430.279 186.175 cv
430.27 186.136 430.262 186.097 430.252 186.056 cv
430.176 185.732 430.084 185.41 429.986 185.089 cv
429.963 185.016 429.939 184.944 429.916 184.87 cv
429.81 184.549 429.699 184.23 429.57 183.914 cv
429.56 183.889 429.549 183.865 429.537 183.84 cv
429.416 183.544 429.281 183.249 429.139 182.959 cv
429.107 182.893 429.074 182.828 429.041 182.762 cv
428.889 182.46 428.725 182.162 428.549 181.869 cv
428.516 181.815 428.482 181.762 428.447 181.708 cv
428.283 181.442 428.109 181.18 427.928 180.921 cv
427.895 180.876 427.865 180.831 427.832 180.786 cv
427.629 180.505 427.412 180.23 427.185 179.961 cv
427.135 179.9 427.084 179.841 427.031 179.781 cv
426.795 179.507 426.551 179.238 426.291 178.978 cv
426.195 178.882 426.094 178.79 425.99 178.697 cv
cp
1 1 1 rgb
f
411.871 182.194 mo
412.449 182.773 412.449 183.711 411.871 184.29 cv
409.93 186.231 li
409.35 186.811 408.412 186.811 407.834 186.232 cv
407.834 186.232 li
407.254 185.652 407.254 184.715 407.834 184.135 cv
409.775 182.194 li
410.353 181.615 411.291 181.614 411.871 182.194 cv
411.871 182.194 li
cp
0 0 0 rgb
f
423.357 194.123 mo
423.938 194.702 423.935 195.641 423.357 196.22 cv
421.416 198.161 li
420.836 198.74 419.898 198.74 419.318 198.161 cv
419.318 198.161 li
418.74 197.581 418.74 196.644 419.318 196.065 cv
421.26 194.123 li
421.84 193.544 422.777 193.543 423.357 194.123 cv
423.357 194.123 li
cp
1 1 1 rgb
f
355.68 133.813 mo
356.639 135.706 li
355.813 136.124 li
355.813 136.124 354.943 136.453 354.51 135.594 cv
354.063 134.708 354.855 134.23 354.855 134.23 cv
355.68 133.813 li
cp
.0352941 .188235 .431373 rgb
f
358.56 139.158 mo
359.752 140.915 li
358.988 141.434 li
358.988 141.434 358.166 141.871 357.627 141.074 cv
357.07 140.253 357.797 139.676 357.797 139.676 cv
358.56 139.158 li
cp
f
361.912 143.996 mo
363.215 145.673 li
362.484 146.24 li
362.484 146.24 361.693 146.727 361.103 145.968 cv
360.496 145.185 361.184 144.564 361.184 144.564 cv
361.912 143.996 li
cp
f
365.414 148.432 mo
366.779 150.056 li
366.074 150.651 li
366.074 150.651 365.303 151.17 364.684 150.436 cv
364.043 149.677 364.707 149.029 364.707 149.029 cv
365.414 148.432 li
cp
f
373.807 148.555 mo
371.633 150.73 li
398.467 177.565 li
398.467 177.565 400.195 178.41 401.912 176.694 cv
403.592 175.015 402.783 173.25 402.783 173.25 cv
375.947 146.414 li
373.807 148.555 li
cp
0 0 0 rgb
f
371.633 150.73 mo
375.947 146.414 li
374.148 140.365 li
374.148 140.365 364.523 136.263 363.115 133.271 cv
362.145 131.204 363.49 129.935 363.49 129.935 cv
363.49 129.935 362.209 126.953 359.047 127.522 cv
355.635 128.138 354.918 130.958 355.273 132.586 cv
356.512 138.276 367.576 151.058 367.576 151.058 cv
371.633 150.73 li
cp
.85098 .431373 .517647 rgb
f
369.158 146.62 mo
369.609 147.072 369.609 147.803 369.158 148.255 cv
368.705 148.707 367.975 148.707 367.521 148.256 cv
367.07 147.804 367.07 147.072 367.521 146.62 cv
367.975 146.169 368.705 146.169 369.158 146.62 cv
cp
1 1 1 rgb
f
365.838 142.222 mo
366.289 142.674 366.289 143.406 365.838 143.856 cv
365.387 144.309 364.656 144.308 364.203 143.856 cv
363.754 143.406 363.752 142.675 364.203 142.223 cv
364.656 141.771 365.387 141.771 365.838 142.222 cv
cp
f
362.717 137.464 mo
363.168 137.917 363.168 138.648 362.717 139.1 cv
362.264 139.552 361.533 139.552 361.08 139.099 cv
360.631 138.648 360.629 137.917 361.08 137.465 cv
361.533 137.014 362.266 137.014 362.717 137.464 cv
cp
f
359.609 132.724 mo
360.06 133.176 360.06 133.908 359.611 134.359 cv
359.158 134.811 358.426 134.811 357.975 134.359 cv
357.523 133.908 357.523 133.175 357.975 132.724 cv
358.426 132.273 359.158 132.273 359.609 132.724 cv
cp
f
379.088 149.599 mo
374.771 153.914 li
373.91 153.053 li
378.227 148.737 li
379.088 149.599 li
cp
.866667 .866667 .866667 rgb
f
382.543 153.027 mo
378.228 157.343 li
377.367 156.482 li
381.682 152.165 li
382.543 153.027 li
cp
f
385.982 156.473 mo
381.666 160.788 li
380.807 159.928 li
385.121 155.612 li
385.982 156.473 li
cp
f
389.4 159.939 mo
385.086 164.256 li
384.223 163.395 li
388.539 159.079 li
389.4 159.939 li
cp
f
392.855 163.369 mo
388.541 167.684 li
387.68 166.824 li
391.996 162.508 li
392.855 163.369 li
cp
f
396.32 166.788 mo
392.006 171.103 li
391.145 170.242 li
395.459 165.927 li
396.32 166.788 li
cp
f
399.764 170.23 mo
395.447 174.546 li
394.588 173.685 li
398.902 169.369 li
399.764 170.23 li
cp
f
402.953 173.924 mo
399.131 177.746 li
399.131 177.746 398.885 177.702 398.807 177.682 cv
398.719 177.659 398.465 177.568 398.465 177.568 cv
398.027 177.13 li
402.344 172.814 li
402.781 173.251 li
402.781 173.251 402.869 173.497 402.891 173.579 cv
402.91 173.665 402.953 173.924 402.953 173.924 cv
cp
f
337.5 225.001 mo
225 225.001 li
225 112.499 li
337.5 112.499 li
337.5 225.001 li
cp
1 1 1 rgb
f
316.016 165.205 mo
312.957 163.938 li
303.137 187.145 li
298.537 186.544 li
298.537 174.183 li
295.473 173.65 li
295.473 205.741 li
298.537 205.231 li
298.537 192.911 li
306.32 192.019 li
306.32 187.748 li
316.016 165.205 li
cp
.0352941 .188235 .431373 rgb
f
262.068 174.419 mo
262.068 186.778 li
257.564 187.369 li
247.648 163.938 li
244.59 165.205 li
254.307 187.795 li
254.285 187.798 li
254.285 192.255 li
262.068 193.146 li
262.068 205.467 li
265.133 205.977 li
265.133 173.886 li
262.068 174.419 li
cp
.317647 .105882 .313726 rgb
f
272.297 207.627 mo
272.297 209.606 270.693 211.21 268.715 211.21 cv
268.715 211.21 li
266.738 211.21 265.133 209.606 265.133 207.627 cv
265.133 172.298 li
265.133 170.32 266.738 168.716 268.715 168.716 cv
268.715 168.716 li
270.693 168.716 272.297 170.32 272.297 172.298 cv
272.297 207.627 li
cp
0 0 0 rgb
f
249.467 146.934 mo
246.424 152.178 244.674 158.261 244.674 164.749 cv
247.73 164.749 li
247.73 158.177 249.693 152.058 253.053 146.934 cv
258.879 138.055 268.914 132.175 280.303 132.175 cv
280.303 129.119 li
267.145 129.119 255.637 136.295 249.467 146.934 cv
cp
.85098 .431373 .517647 rgb
f
249.207 164.749 mo
249.207 166.357 247.902 167.662 246.295 167.662 cv
244.686 167.662 243.381 166.357 243.381 164.749 cv
243.381 163.14 244.686 161.835 246.295 161.835 cv
247.902 161.835 249.207 163.14 249.207 164.749 cv
cp
.866667 .866667 .866667 rgb
f
288.309 207.39 mo
288.309 209.368 289.912 210.972 291.891 210.972 cv
291.891 210.972 li
293.869 210.972 295.473 209.368 295.473 207.39 cv
295.473 172.063 li
295.473 170.085 293.869 168.482 291.891 168.482 cv
291.891 168.482 li
289.912 168.482 288.309 170.085 288.309 172.063 cv
288.309 207.39 li
cp
0 0 0 rgb
f
311.139 146.934 mo
304.969 136.295 293.461 129.119 280.303 129.119 cv
280.303 132.175 li
291.691 132.175 301.728 138.055 307.553 146.934 cv
310.914 152.058 312.877 158.177 312.877 164.749 cv
315.934 164.749 li
315.934 158.261 314.182 152.178 311.139 146.934 cv
cp
.74902 .0392157 .188235 rgb
f
311.398 164.749 mo
311.398 166.357 312.703 167.662 314.313 167.662 cv
315.922 167.662 317.225 166.357 317.225 164.749 cv
317.225 163.14 315.922 161.835 314.313 161.835 cv
312.703 161.835 311.398 163.14 311.398 164.749 cv
cp
.866667 .866667 .866667 rgb
f
112.499 337.5 mo
0 337.5 li
0 225.001 li
112.499 225.001 li
112.499 337.5 li
cp
.827451 .854902 .909804 rgb
f
43.4624 312.547 mo
42.5552 317.471 li
55.8428 317.471 li
55.8428 312.547 li
43.4624 312.547 li
cp
.8 .231373 .34902 rgb
f
55.8428 295.602 mo
54.4917 295.602 li
52.7622 295.602 51.3115 296.117 50.123 297.014 cv
48.4536 298.275 46.9492 300.352 46.2549 302.783 cv
45.6255 304.988 43.4624 312.547 43.4624 312.547 cv
55.8428 312.547 li
55.8428 295.602 li
cp
1 .74902 .439216 rgb
f
55.8428 312.547 mo
55.8428 317.471 li
69.2979 317.471 li
68.3516 312.547 li
55.8428 312.547 li
cp
.85098 .431373 .517647 rgb
f
68.3516 312.547 mo
68.3516 312.547 66.6489 304.465 66.0811 302.732 cv
64.688 298.486 61.3687 295.602 57.1963 295.602 cv
55.8428 295.602 li
55.8428 312.547 li
68.3516 312.547 li
cp
.890196 .490196 0 rgb
f
55.8428 271.23 mo
55.8428 272.393 li
55.8428 276.852 li
55.8428 278.018 li
73.3423 278.018 li
73.563 276.815 li
74.3662 272.451 li
74.5918 271.23 li
55.8428 271.23 li
cp
f
37.4458 271.23 mo
37.6724 272.412 li
38.5127 276.785 li
38.7495 278.018 li
55.8428 278.018 li
55.8428 276.852 li
55.8428 272.393 li
55.8428 271.23 li
37.4458 271.23 li
cp
1 .74902 .439216 rgb
f
78.8896 247.898 mo
32.9629 247.898 li
34.2583 254.641 li
77.6479 254.641 li
78.8896 247.898 li
cp
.890196 .490196 0 rgb
f
55.8428 254.641 mo
55.8428 267.924 li
55.8428 271.23 li
74.5918 271.23 li
75.2007 267.924 li
77.6479 254.641 li
55.8428 254.641 li
cp
.74902 .0392157 .188235 rgb
f
34.2583 254.641 mo
36.8105 267.924 li
37.4458 271.23 li
55.8428 271.23 li
55.8428 267.924 li
55.8428 254.641 li
34.2583 254.641 li
cp
.85098 .431373 .517647 rgb
f
39.3848 281.322 mo
55.8428 281.322 li
72.7324 281.322 li
73.3423 278.018 li
38.7495 278.018 li
39.3848 281.322 li
cp
1 1 1 rgb
f
72.7324 281.322 mo
55.8428 281.322 li
55.8428 293.965 li
67.1548 293.965 li
69.6919 291.467 71.3911 287.807 72.3237 283.543 cv
72.7324 281.322 li
cp
.74902 .0392157 .188235 rgb
f
55.8428 297.477 mo
58.3896 297.477 li
60.624 297.477 62.5854 296.977 64.2896 296.074 cv
55.8428 296.074 li
55.8428 297.477 li
cp
f
47.7197 296.074 mo
49.4565 296.982 51.46 297.477 53.7451 297.477 cv
55.8428 297.477 li
55.8428 296.074 li
47.7197 296.074 li
cp
.8 .231373 .34902 rgb
f
55.8428 281.322 mo
39.3848 281.322 li
39.811 283.543 li
40.6987 287.916 42.3623 291.52 44.8428 293.965 cv
55.8428 293.965 li
55.8428 281.322 li
cp
.85098 .431373 .517647 rgb
f
77.8032 252.439 mo
77.8062 252.414 77.8174 252.393 77.8174 252.367 cv
77.8174 252.051 77.5615 251.795 77.2461 251.795 cv
76.9443 251.795 76.7036 252.031 76.6821 252.328 cv
76.6743 252.328 li
64.666 293.965 li
62.397 293.965 li
69.7876 252.455 li
69.7705 252.453 li
69.7749 252.424 69.7876 252.398 69.7876 252.367 cv
69.7876 252.051 69.5317 251.795 69.2163 251.795 cv
68.9141 251.795 68.6733 252.031 68.6523 252.328 cv
68.6445 252.328 li
61.2051 293.965 li
58.6304 293.965 li
61.084 252.475 li
61.0762 252.473 li
61.083 252.438 61.0977 252.404 61.0977 252.367 cv
61.0977 252.051 60.8418 251.795 60.5264 251.795 cv
60.2241 251.795 59.9834 252.031 59.9624 252.328 cv
59.9546 252.328 li
57.4551 293.965 li
55.8428 293.965 li
54.1919 293.965 li
52.4102 252.367 li
52.4102 252.051 52.1543 251.795 51.8389 251.795 cv
51.5371 251.795 51.2964 252.031 51.2749 252.328 cv
51.2612 252.328 li
53.0176 293.965 li
50.7593 293.965 li
43.707 252.367 li
43.707 252.051 43.4512 251.795 43.1357 251.795 cv
42.8198 251.795 42.564 252.051 42.564 252.367 cv
42.564 252.408 42.5791 252.445 42.5874 252.484 cv
42.564 252.486 li
49.5693 293.965 li
47.2593 293.965 li
35.187 252.23 li
35.1797 252.232 li
35.1182 251.984 34.9033 251.795 34.6357 251.795 cv
34.3198 251.795 34.064 252.051 34.064 252.367 cv
34.064 252.422 34.0806 252.473 34.0952 252.523 cv
34.0894 252.525 li
46.0381 293.965 li
44.8428 293.965 li
45.7026 294.815 46.6611 295.522 47.7197 296.074 cv
55.8428 296.074 li
64.2896 296.074 li
65.3418 295.52 66.2974 294.81 67.1548 293.965 cv
65.8872 293.965 li
77.8174 252.439 li
77.8032 252.439 li
cp
0 0 0 rgb
f
225 112.499 mo
112.499 112.499 li
112.499 0 li
225 0 li
225 112.499 li
cp
1 1 1 rgb
f
157.613 71.7334 mo
145.611 71.7334 li
138.956 71.7334 133.543 66.3213 133.543 59.667 cv
133.543 53.0117 138.956 47.5986 145.611 47.5986 cv
209.425 47.5986 li
209.425 52.6016 li
145.611 52.6016 li
141.715 52.6016 138.546 55.7705 138.546 59.667 cv
138.546 63.5615 141.715 66.7314 145.611 66.7314 cv
157.613 66.7314 li
157.613 71.7334 li
cp
.890196 .490196 0 rgb
f
160.977 40.8623 mo
154.251 40.8623 li
156.113 43.3975 li
156.113 77.0791 li
159.115 77.0791 li
159.115 43.374 li
160.977 40.8623 li
cp
1 .74902 .439216 rgb
f
171.193 40.8623 mo
164.467 40.8623 li
166.329 43.3975 li
166.329 77.0791 li
169.331 77.0791 li
169.331 43.374 li
171.193 40.8623 li
cp
f
181.409 40.8623 mo
174.685 40.8623 li
176.545 43.3975 li
176.545 77.0791 li
179.547 77.0791 li
179.547 43.374 li
181.409 40.8623 li
cp
f
216.434 33.5635 mo
197.029 47.5986 li
197.029 50.0566 li
220.426 50.0566 li
220.416 40.0313 216.434 33.5635 216.434 33.5635 cv
cp
f
197.029 50.0566 mo
197.029 52.6016 li
216.434 66.5518 li
216.434 66.5518 220.428 59.8574 220.428 50.1006 cv
220.428 50.085 220.426 50.0713 220.426 50.0566 cv
197.029 50.0566 li
cp
.890196 .490196 0 rgb
f
124.053 56.7051 mo
119.818 53.5674 li
119.818 53.5674 118.453 55.8555 118.453 59.1914 cv
118.453 59.1973 118.453 59.2012 118.453 59.2061 cv
124.053 59.2061 li
124.053 56.7051 li
cp
1 .74902 .439216 rgb
f
192.614 56.7051 mo
124.053 56.7051 li
124.053 59.2061 li
118.453 59.2061 li
118.456 62.6348 119.818 64.8457 119.818 64.8457 cv
124.053 61.7373 li
124.053 61.707 li
192.614 61.707 li
194.909 61.707 195.252 63.2139 195.252 64.1104 cv
195.252 64.8271 195.252 66.7314 189.936 66.7314 cv
179.503 66.7314 li
179.503 71.7334 li
189.936 71.7334 li
199.25 71.7334 200.255 66.4033 200.255 64.1104 cv
200.255 59.751 197.113 56.7051 192.614 56.7051 cv
cp
.890196 .490196 0 rgb
f
450 337.5 mo
337.5 337.5 li
337.5 225.001 li
450 225.001 li
450 337.5 li
cp
1 1 1 rgb
f
394.033 296.732 mo
393.793 296.732 li
383.396 296.732 374.939 288.273 374.939 277.879 cv
374.939 270.383 li
374.939 269.555 375.611 268.883 376.439 268.883 cv
377.268 268.883 377.939 269.555 377.939 270.383 cv
377.939 277.879 li
377.939 286.619 385.051 293.732 393.793 293.732 cv
394.033 293.732 li
402.775 293.732 409.887 286.619 409.887 277.879 cv
409.887 270.383 li
409.887 269.555 410.559 268.883 411.387 268.883 cv
412.215 268.883 412.887 269.555 412.887 270.383 cv
412.887 277.879 li
412.887 288.273 404.43 296.732 394.033 296.732 cv
cp
.0352941 .188235 .431373 rgb
f
390.955 288.072 mo
390.955 315.197 li
393.83 315.197 li
393.83 288.072 li
390.955 288.072 li
cp
.866667 .866667 .866667 rgb
f
396.705 288.072 mo
393.83 288.072 li
393.83 315.197 li
396.705 315.197 li
396.705 288.072 li
cp
.65098 .65098 .65098 rgb
f
405.414 311.816 mo
382.246 311.816 li
379.623 311.816 377.496 313.943 377.496 316.566 cv
410.164 316.566 li
410.164 313.943 408.037 311.816 405.414 311.816 cv
cp
.0352941 .188235 .431373 rgb
f
393.996 246.92 mo
393.83 246.92 li
393.83 268.254 li
405.996 268.254 li
405.996 258.92 li
405.996 252.293 400.623 246.92 393.996 246.92 cv
cp
.65098 .65098 .65098 rgb
f
393.83 246.92 mo
393.83 246.92 li
387.203 246.92 381.83 252.293 381.83 258.92 cv
381.83 268.254 li
393.83 268.254 li
393.83 246.92 li
cp
.866667 .866667 .866667 rgb
f
393.83 289.588 mo
393.996 289.588 li
400.623 289.588 405.996 284.215 405.996 277.588 cv
405.996 268.254 li
393.83 268.254 li
393.83 289.588 li
cp
0 0 0 rgb
f
381.83 268.254 mo
381.83 277.588 li
381.83 284.215 387.203 289.588 393.83 289.588 cv
393.83 289.588 li
393.83 268.254 li
381.83 268.254 li
cp
.0352941 .188235 .431373 rgb
f
374.918 272.414 mo
374.918 276.574 li
381.83 276.574 li
381.83 272.414 li
374.918 272.414 li
cp
.65098 .65098 .65098 rgb
f
412.871 272.414 mo
405.996 272.414 li
405.996 276.574 li
412.871 276.574 li
412.871 272.414 li
cp
f
381.83 272.414 mo
381.83 276.574 li
405.996 276.574 li
405.996 272.414 li
381.83 272.414 li
cp
.866667 .866667 .866667 rgb
f
386.256 265.053 mo
386.256 265.889 385.576 266.568 384.74 266.568 cv
383.904 266.568 383.225 265.889 383.225 265.053 cv
383.225 264.217 383.904 263.537 384.74 263.537 cv
385.576 263.537 386.256 264.217 386.256 265.053 cv
cp
.0352941 .188235 .431373 rgb
f
392.314 265.053 mo
392.314 265.889 391.637 266.568 390.801 266.568 cv
389.965 266.568 389.285 265.889 389.285 265.053 cv
389.285 264.217 389.965 263.537 390.801 263.537 cv
391.637 263.537 392.314 264.217 392.314 265.053 cv
cp
f
398.375 265.053 mo
398.375 265.889 397.697 266.568 396.861 266.568 cv
396.023 266.568 395.346 265.889 395.346 265.053 cv
395.346 264.217 396.023 263.537 396.861 263.537 cv
397.697 263.537 398.375 264.217 398.375 265.053 cv
cp
0 0 0 rgb
f
404.435 265.053 mo
404.435 265.889 403.758 266.568 402.92 266.568 cv
402.084 266.568 401.406 265.889 401.406 265.053 cv
401.406 264.217 402.084 263.537 402.92 263.537 cv
403.758 263.537 404.435 264.217 404.435 265.053 cv
cp
f
386.256 258.992 mo
386.256 259.828 385.576 260.508 384.74 260.508 cv
383.904 260.508 383.225 259.828 383.225 258.992 cv
383.225 258.156 383.904 257.477 384.74 257.477 cv
385.576 257.477 386.256 258.156 386.256 258.992 cv
cp
.0352941 .188235 .431373 rgb
f
392.314 258.992 mo
392.314 259.828 391.637 260.508 390.801 260.508 cv
389.965 260.508 389.285 259.828 389.285 258.992 cv
389.285 258.156 389.965 257.477 390.801 257.477 cv
391.637 257.477 392.314 258.156 392.314 258.992 cv
cp
f
398.375 258.992 mo
398.375 259.828 397.697 260.508 396.861 260.508 cv
396.023 260.508 395.346 259.828 395.346 258.992 cv
395.346 258.156 396.023 257.477 396.861 257.477 cv
397.697 257.477 398.375 258.156 398.375 258.992 cv
cp
0 0 0 rgb
f
404.435 258.992 mo
404.435 259.828 403.758 260.508 402.92 260.508 cv
402.084 260.508 401.406 259.828 401.406 258.992 cv
401.406 258.156 402.084 257.477 402.92 257.477 cv
403.758 257.477 404.435 258.156 404.435 258.992 cv
cp
f
392.314 252.932 mo
392.314 253.768 391.637 254.447 390.801 254.447 cv
389.965 254.447 389.285 253.768 389.285 252.932 cv
389.285 252.096 389.965 251.416 390.801 251.416 cv
391.637 251.416 392.314 252.096 392.314 252.932 cv
cp
.0352941 .188235 .431373 rgb
f
398.375 252.932 mo
398.375 253.768 397.697 254.447 396.861 254.447 cv
396.023 254.447 395.346 253.768 395.346 252.932 cv
395.346 252.096 396.023 251.416 396.861 251.416 cv
397.697 251.416 398.375 252.096 398.375 252.932 cv
cp
0 0 0 rgb
f
337.5 112.499 mo
225 112.499 li
225 0 li
337.5 0 li
337.5 112.499 li
cp
.827451 .854902 .909804 rgb
f
269.166 92.9707 mo
267.375 92.9707 li
267.375 26.582 li
269.166 26.582 li
269.166 92.9707 li
cp
0 0 0 rgb
f
274.141 92.9707 mo
272.352 92.9707 li
272.352 26.582 li
274.141 26.582 li
274.141 92.9707 li
cp
f
279.117 92.9707 mo
277.328 92.9707 li
277.328 26.582 li
279.117 26.582 li
279.117 92.9707 li
cp
f
284.094 86.8799 mo
282.303 86.8799 li
282.303 26.582 li
284.094 26.582 li
284.094 86.8799 li
cp
f
289.07 85.0752 mo
287.279 85.0752 li
287.279 28.5566 li
289.07 28.5566 li
289.07 85.0752 li
cp
f
294.045 81.6904 mo
292.256 81.6904 li
292.256 41.3047 li
294.045 41.3047 li
294.045 81.6904 li
cp
f
299.021 78.7578 mo
297.232 78.7578 li
297.232 53.2061 li
299.021 53.2061 li
299.021 78.7578 li
cp
f
303.998 77.0654 mo
302.207 77.0654 li
302.207 57.3809 li
303.998 57.3809 li
303.998 77.0654 li
cp
f
308.975 74.0195 mo
307.184 74.0195 li
307.184 57.3809 li
308.975 57.3809 li
308.975 74.0195 li
cp
f
313.949 71.5381 mo
312.16 71.5381 li
312.16 57.3809 li
313.949 57.3809 li
313.949 71.5381 li
cp
f
256.744 19.7559 mo
256.744 92.9707 li
260.467 92.9707 li
260.467 19.7559 li
256.744 19.7559 li
cp
.85098 .431373 .517647 rgb
f
264.189 19.7559 mo
260.467 19.7559 li
260.467 92.9707 li
264.189 92.9707 li
264.189 19.7559 li
cp
.74902 .0392157 .188235 rgb
f
264.189 23.4795 mo
256.744 23.4795 li
254.451 15.583 li
266.48 15.583 li
264.189 23.4795 li
cp
f
308.34 54.9951 mo
301.77 54.9951 296.426 49.6514 296.426 43.0801 cv
296.426 32.2715 287.631 23.4795 276.822 23.4795 cv
264.189 23.4795 li
264.189 28.8936 li
276.822 28.8936 li
284.646 28.8936 291.01 35.2578 291.01 43.0801 cv
291.01 52.6367 298.705 59.8066 308.262 59.8066 cv
310.914 59.8066 315.594 59.0732 316.559 65.1133 cv
318.625 64.0137 li
318.471 59.0996 313.678 54.9951 308.34 54.9951 cv
cp
.8 .231373 .34902 rgb
f
267.742 18.6289 mo
253.189 18.6289 li
253.189 15.583 li
267.742 15.583 li
267.742 18.6289 li
cp
.85098 .431373 .517647 rgb
f
318.625 64.0137 mo
264.193 92.9707 li
250.908 92.9707 li
250.908 96.918 li
272.435 96.918 li
312.549 73.9639 li
319.881 69.6201 318.625 64.0137 318.625 64.0137 cv
cp
f
225 450 mo
112.499 450 li
112.499 337.5 li
225 337.5 li
225 450 li
cp
.827451 .854902 .909804 rgb
f
138.841 365.264 mo
134.882 369.223 li
134.034 368.373 li
137.993 364.416 li
138.841 365.264 li
cp
.65098 .65098 .65098 rgb
f
135.65 367.605 mo
136.233 368.19 136.233 369.131 135.65 369.713 cv
135.068 370.297 134.124 370.297 133.542 369.713 cv
132.96 369.131 132.96 368.19 133.542 367.605 cv
134.124 367.023 135.068 367.023 135.65 367.605 cv
cp
0 0 0 rgb
f
135.67 362.094 mo
131.711 366.053 li
130.863 365.203 li
134.822 361.244 li
135.67 362.094 li
cp
.65098 .65098 .65098 rgb
f
132.48 364.435 mo
133.062 365.018 133.062 365.961 132.48 366.543 cv
131.897 367.125 130.954 367.125 130.373 366.543 cv
129.79 365.961 129.79 365.018 130.373 364.435 cv
130.954 363.853 131.897 363.853 132.48 364.435 cv
cp
0 0 0 rgb
f
140.632 363.471 mo
144.591 359.514 li
143.743 358.664 li
139.786 362.623 li
140.632 363.471 li
cp
.65098 .65098 .65098 rgb
f
142.975 360.281 mo
143.558 360.863 144.501 360.863 145.083 360.281 cv
145.665 359.699 145.665 358.756 145.083 358.172 cv
144.501 357.592 143.558 357.592 142.975 358.172 cv
142.393 358.756 142.393 359.699 142.975 360.281 cv
cp
0 0 0 rgb
f
137.462 360.301 mo
141.421 356.342 li
140.573 355.494 li
136.615 359.453 li
137.462 360.301 li
cp
.65098 .65098 .65098 rgb
f
139.804 357.111 mo
140.387 357.691 141.331 357.691 141.913 357.111 cv
142.495 356.527 142.495 355.586 141.913 355.002 cv
141.331 354.42 140.387 354.42 139.804 355.002 cv
139.223 355.586 139.223 356.527 139.804 357.111 cv
cp
0 0 0 rgb
f
179.516 427.676 mo
177.912 426.688 176.905 424.746 176.678 424.141 cv
176.134 422.697 175.306 421.414 174.217 420.324 cv
173.29 419.397 172.119 418.598 170.956 418.066 cv
172.981 415.49 173.077 411.365 171.082 408.316 cv
168.796 404.82 li
167.547 402.91 165.054 400.572 162.138 400.27 cv
161.023 400.154 159.977 400.353 159.047 400.853 cv
158.807 400.408 158.487 399.98 158.086 399.57 cv
157.764 399.244 157.054 398.613 155.895 398.082 cv
154.215 397.31 153.574 396.617 152.667 395.549 cv
148.952 391.172 149.551 383.732 153.979 379.305 cv
154.295 378.988 li
198.087 422.781 li
197.73 423.139 li
194.796 426.072 187.152 432.383 179.516 427.676 cv
cp
200.676 398.107 mo
199.704 397.74 198.834 397.18 198.098 396.443 cv
196.992 395.336 196.281 393.869 196.171 393.049 cv
196.041 392.08 195.401 391.266 194.536 390.973 cv
193.765 390.711 192.931 390.904 192.36 391.475 cv
192.016 391.935 li
190.989 393.93 187.761 394.315 185.533 392.857 cv
182.037 390.57 li
180.443 389.527 179.184 387.803 179.047 386.473 cv
178.968 385.711 179.247 385.133 179.95 384.603 cv
180.141 384.435 li
180.698 383.879 180.854 383.027 180.539 382.268 cv
180.163 381.363 179.245 380.777 178.2 380.777 cv
177.865 380.777 177.566 380.529 177.317 380.285 cv
177.248 380.217 176.885 379.844 176.559 379.135 cv
175.508 376.846 174.424 375.815 173.114 374.701 cv
167.309 369.773 157.901 370.449 152.142 376.205 cv
151.869 376.478 li
151.861 376.488 151.852 376.498 151.844 376.506 cv
151.512 376.838 li
145.753 382.594 145.079 392.002 150.007 397.807 cv
151.121 399.119 152.152 400.203 154.44 401.254 cv
155.148 401.578 155.523 401.943 155.591 402.012 cv
155.835 402.26 156.083 402.559 156.083 402.895 cv
156.082 403.94 156.669 404.855 157.575 405.232 cv
158.335 405.547 159.184 405.391 159.74 404.836 cv
159.912 404.641 li
160.419 403.957 161.017 403.662 161.778 403.74 cv
163.11 403.879 164.832 405.137 165.876 406.73 cv
168.164 410.227 li
169.62 412.455 169.243 415.674 167.242 416.711 cv
166.781 417.055 li
166.21 417.625 166.018 418.459 166.278 419.228 cv
166.571 420.094 167.386 420.736 168.355 420.865 cv
169.174 420.975 170.643 421.685 171.748 422.793 cv
172.486 423.529 173.046 424.397 173.412 425.369 cv
173.465 425.508 174.738 428.83 177.684 430.647 cv
184.453 434.818 192.869 432.935 200.198 425.605 cv
200.913 424.893 li
208.242 417.563 210.125 409.147 205.953 402.377 cv
204.136 399.432 200.814 398.158 200.676 398.107 cv
cp
f
175.045 424.756 mo
174.607 423.59 173.92 422.496 172.984 421.559 cv
171.728 420.303 169.917 419.313 168.583 419.137 cv
168.033 419.063 167.706 418.541 168.046 418.26 cv
171.14 416.652 171.56 412.234 169.623 409.272 cv
167.336 405.775 li
165.41 402.83 161.106 400.176 158.52 403.586 cv
158.373 403.781 157.829 403.52 157.829 402.895 cv
157.829 401.832 157.143 401.103 156.837 400.791 cv
156.622 400.57 156.073 400.084 155.167 399.668 cv
153.16 398.746 152.321 397.838 151.337 396.678 cv
146.905 391.457 147.763 383.053 152.746 378.07 cv
153.02 377.797 li
153.035 377.783 153.049 377.772 153.064 377.758 cv
199.322 424.016 li
198.963 424.373 li
192.795 430.543 185.163 433.207 178.6 429.16 cv
176.438 427.828 175.281 425.381 175.045 424.756 cv
cp
.85098 .431373 .517647 rgb
f
192.878 411.883 mo
187.255 417.506 li
192.068 420.26 196.38 424.559 196.38 424.559 cv
196.38 424.559 li
197.362 425.537 198.949 425.537 199.928 424.559 cv
200.908 423.578 200.908 421.99 199.929 421.01 cv
199.929 421.01 li
199.929 421.01 195.598 416.662 192.878 411.883 cv
cp
.454902 .286275 .45098 rgb
f
198.796 422.065 mo
199.172 422.44 199.172 423.051 198.796 423.426 cv
198.42 423.803 197.811 423.803 197.434 423.426 cv
197.058 423.051 197.058 422.44 197.434 422.065 cv
197.811 421.688 198.42 421.688 198.796 422.065 cv
cp
0 0 0 rgb
f
135.398 356.635 mo
132.108 359.926 li
139.644 368.002 li
143.453 364.193 li
135.398 356.635 li
cp
.0352941 .188235 .431373 rgb
f
139.644 368.002 mo
166.073 396.326 li
171.698 390.701 li
143.453 364.193 li
139.644 368.002 li
cp
1 1 1 rgb
f
135.534 356.066 mo
136.08 356.611 136.08 357.496 135.534 358.043 cv
133.413 360.162 li
132.867 360.709 131.982 360.709 131.437 360.162 cv
129.315 358.041 li
128.769 357.496 128.771 356.611 129.316 356.066 cv
131.437 353.945 li
131.982 353.398 132.866 353.398 133.412 353.945 cv
135.534 356.066 li
cp
0 0 0 rgb
f
185.318 404.324 mo
179.63 410.012 li
177.711 408.092 li
183.399 402.404 li
185.318 404.324 li
cp
1 .74902 .439216 rgb
f
175.087 412.635 mo
174.637 413.084 173.926 413.527 173.141 413.326 cv
172.486 413.16 171.788 412.547 171.788 411.736 cv
171.788 411.414 172.047 411.154 172.369 411.154 cv
172.69 411.154 172.951 411.414 172.951 411.736 cv
172.951 411.945 173.233 412.148 173.427 412.199 cv
173.772 412.285 174.245 411.891 174.453 411.592 cv
175.124 410.645 174.033 408.975 172.787 407.728 cv
172.169 407.109 171.532 406.482 170.886 405.897 cv
170.008 405.098 169.373 404.441 168.889 403.824 cv
168.29 403.068 167.669 401.603 168.409 400.672 cv
168.749 400.244 169.388 399.832 170.039 399.885 cv
170.503 399.922 170.915 400.127 171.198 400.463 cv
171.472 400.789 171.601 401.205 171.56 401.637 cv
171.533 401.953 171.249 402.19 170.927 402.162 cv
170.608 402.133 170.373 401.85 170.403 401.529 cv
170.414 401.408 170.381 401.299 170.308 401.211 cv
170.226 401.115 170.1 401.057 169.945 401.045 cv
169.766 401.031 169.478 401.184 169.32 401.395 cv
169.076 401.701 169.377 402.566 169.801 403.105 cv
170.386 403.846 171.147 404.56 171.669 405.037 cv
172.328 405.635 172.978 406.275 173.61 406.906 cv
175.688 408.986 176.342 410.94 175.402 412.266 cv
175.32 412.379 175.214 412.508 175.087 412.635 cv
cp
1 1 1 rgb
f
187.941 399.779 mo
188.391 399.33 188.834 398.619 188.631 397.834 cv
188.467 397.18 187.852 396.48 187.042 396.48 cv
186.721 396.48 186.46 396.74 186.46 397.063 cv
186.46 397.385 186.721 397.645 187.042 397.645 cv
187.251 397.645 187.456 397.928 187.504 398.121 cv
187.592 398.465 187.198 398.938 186.899 399.147 cv
185.951 399.818 184.282 398.727 183.036 397.48 cv
182.417 396.861 181.79 396.225 181.203 395.58 cv
180.405 394.701 179.748 394.066 179.131 393.582 cv
178.374 392.984 176.91 392.363 175.978 393.102 cv
175.551 393.443 175.138 394.08 175.192 394.732 cv
175.229 395.197 175.434 395.607 175.77 395.891 cv
176.095 396.164 176.51 396.293 176.944 396.254 cv
177.259 396.227 177.498 395.943 177.468 395.621 cv
177.439 395.301 177.156 395.065 176.835 395.096 cv
176.715 395.105 176.605 395.072 176.519 395.002 cv
176.422 394.92 176.363 394.793 176.35 394.639 cv
176.336 394.459 176.492 394.172 176.702 394.014 cv
177.009 393.768 177.873 394.07 178.413 394.494 cv
179.152 395.078 179.868 395.84 180.343 396.363 cv
180.942 397.022 181.581 397.672 182.213 398.303 cv
184.292 400.381 186.247 401.035 187.572 400.094 cv
187.685 400.014 187.814 399.908 187.941 399.779 cv
cp
f
112.499 450 mo
0 450 li
0 337.5 li
112.499 337.5 li
112.499 450 li
cp
f
100.509 415.855 mo
10.6592 415.855 li
10.6592 374.045 li
100.509 374.045 li
100.509 415.855 li
cp
.0352941 .188235 .431373 rgb
f
64.3242 415.855 mo
46.8877 415.855 li
46.8877 374.045 li
64.3242 374.045 li
64.3242 415.855 li
cp
0 0 0 rgb
f
53.3623 383.967 mo
53.3545 383.959 li
53.3545 383.959 li
53.0581 383.525 52.8828 383 52.8828 382.435 cv
52.8828 380.941 54.0903 379.734 55.5845 379.734 cv
56.4287 379.734 57.1729 380.131 57.6685 380.738 cv
57.6753 380.732 li
60.5454 383.566 li
60.6279 383.199 60.6802 382.824 60.6802 382.435 cv
60.6802 379.621 58.3999 377.338 55.5845 377.338 cv
52.769 377.338 50.4868 379.621 50.4868 382.435 cv
50.4868 385.25 52.769 387.533 55.5845 387.533 cv
55.9946 387.533 56.3901 387.471 56.7734 387.379 cv
54.0542 384.656 li
53.7837 384.471 53.5493 384.238 53.3623 383.967 cv
cp
.85098 .431373 .517647 rgb
f
53.3545 383.959 mo
53.3623 383.967 li
53.3589 383.965 53.3564 383.959 53.3545 383.959 cv
53.3545 383.959 li
cp
.0156863 .054902 .00784314 rgb
f
60.5454 383.566 mo
57.6753 380.732 li
57.6685 380.738 li
58.0469 381.203 58.2837 381.787 58.2837 382.435 cv
58.2837 383.926 57.0752 385.135 55.5845 385.135 cv
55.0171 385.135 54.4888 384.957 54.0542 384.656 cv
56.7734 387.379 li
58.6484 386.93 60.1172 385.449 60.5454 383.566 cv
cp
.74902 .0392157 .188235 rgb
f
54.0542 384.656 mo
53.3623 383.967 li
53.5493 384.238 53.7837 384.471 54.0542 384.656 cv
cp
.913725 .87451 .843137 rgb
f
57.6685 380.738 mo
57.1729 380.131 56.4287 379.734 55.5845 379.734 cv
54.0903 379.734 52.8828 380.941 52.8828 382.435 cv
52.8828 383 53.0581 383.525 53.3545 383.959 cv
53.3564 383.959 53.3589 383.965 53.3623 383.967 cv
54.0542 384.656 li
54.4888 384.957 55.0171 385.135 55.5845 385.135 cv
57.0752 385.135 58.2837 383.926 58.2837 382.435 cv
58.2837 381.787 58.0469 381.203 57.6685 380.738 cv
cp
1 1 1 rgb
f
56.7539 411.461 mo
54.4131 411.461 li
54.4131 391.065 li
56.7539 391.065 li
56.7539 411.461 li
cp
.74902 .0392157 .188235 rgb
f
60.0649 394.182 mo
60.0649 397.707 li
51.1021 397.707 li
51.1021 394.182 li
60.0649 394.182 li
cp
1 1 1 rgb
f
45.0288 397.223 mo
45.0288 405.391 38.4092 412.01 30.2427 412.01 cv
22.0752 412.01 15.4551 405.391 15.4551 397.223 cv
15.4551 389.055 22.0752 382.435 30.2427 382.435 cv
38.4092 382.435 45.0288 389.055 45.0288 397.223 cv
cp
0 0 0 rgb
f
30.2417 385.57 mo
23.8062 385.57 18.5898 390.787 18.5898 397.223 cv
30.2417 397.223 li
30.2417 385.57 li
cp
1 1 1 rgb
f
18.5898 397.223 mo
18.5898 403.656 23.8062 408.873 30.2417 408.873 cv
30.2417 397.223 li
18.5898 397.223 li
cp
.866667 .866667 .866667 rgb
f
30.2417 408.873 mo
36.6768 408.873 41.8931 403.656 41.8931 397.223 cv
30.2417 397.223 li
30.2417 408.873 li
cp
1 1 1 rgb
f
30.2417 385.57 mo
30.2417 397.223 li
41.8931 397.223 li
41.8931 390.787 36.6768 385.57 30.2417 385.57 cv
cp
.866667 .866667 .866667 rgb
f
19.3574 411.219 mo
19.3574 412.916 17.9829 414.289 16.2852 414.289 cv
14.5894 414.289 13.2144 412.916 13.2144 411.219 cv
13.2144 409.522 14.5894 408.147 16.2852 408.147 cv
17.9829 408.147 19.3574 409.522 19.3574 411.219 cv
cp
1 1 1 rgb
f
16.2866 378.15 mo
16.2866 379.234 15.4087 380.111 14.3257 380.111 cv
13.2437 380.111 12.3657 379.234 12.3657 378.15 cv
12.3657 377.068 13.2437 376.191 14.3257 376.191 cv
15.4087 376.191 16.2866 377.068 16.2866 378.15 cv
cp
.890196 .490196 0 rgb
f
21.9707 378.15 mo
21.9707 379.234 21.0928 380.111 20.0098 380.111 cv
18.9277 380.111 18.0503 379.234 18.0503 378.15 cv
18.0503 377.068 18.9277 376.191 20.0098 376.191 cv
21.0928 376.191 21.9707 377.068 21.9707 378.15 cv
cp
1 1 1 rgb
f
36.2173 375.592 mo
36.2173 380.711 li
24.2661 380.711 li
24.2661 375.592 li
36.2173 375.592 li
cp
.85098 .431373 .517647 rgb
f
34.1226 377.389 mo
34.1226 378.914 li
26.3604 378.914 li
26.3604 377.389 li
34.1226 377.389 li
cp
.890196 .490196 0 rgb
f
26.3604 378.893 mo
28.1797 380.711 li
36.2173 380.711 li
36.2173 379.484 li
34.1226 377.389 li
34.1226 378.893 li
26.3604 378.893 li
cp
.74902 .0392157 .188235 rgb
f
45.1592 379.131 mo
37.9482 379.131 li
37.9482 377.174 li
45.1592 377.174 li
45.1592 379.131 li
cp
1 1 1 rgb
f
98.7754 397.223 mo
98.7754 405.391 92.1553 412.01 83.9893 412.01 cv
75.8218 412.01 69.2017 405.391 69.2017 397.223 cv
69.2017 389.055 75.8218 382.435 83.9893 382.435 cv
92.1553 382.435 98.7754 389.055 98.7754 397.223 cv
cp
0 0 0 rgb
f
83.9878 385.57 mo
77.5527 385.57 72.3364 390.787 72.3364 397.223 cv
83.9878 397.223 li
83.9878 385.57 li
cp
1 1 1 rgb
f
72.3364 397.223 mo
72.3364 403.656 77.5527 408.873 83.9878 408.873 cv
83.9878 397.223 li
72.3364 397.223 li
cp
.866667 .866667 .866667 rgb
f
83.9878 408.873 mo
90.4233 408.873 95.6396 403.656 95.6396 397.223 cv
83.9878 397.223 li
83.9878 408.873 li
cp
1 1 1 rgb
f
83.9878 385.57 mo
83.9878 397.223 li
95.6396 397.223 li
95.6396 390.787 90.4233 385.57 83.9878 385.57 cv
cp
.866667 .866667 .866667 rgb
f
73.104 411.219 mo
73.104 412.916 71.729 414.289 70.0317 414.289 cv
68.3354 414.289 66.9609 412.916 66.9609 411.219 cv
66.9609 409.522 68.3354 408.147 70.0317 408.147 cv
71.729 408.147 73.104 409.522 73.104 411.219 cv
cp
1 1 1 rgb
f
70.0332 378.15 mo
70.0332 379.234 69.1553 380.111 68.0723 380.111 cv
66.9902 380.111 66.1123 379.234 66.1123 378.15 cv
66.1123 377.068 66.9902 376.191 68.0723 376.191 cv
69.1553 376.191 70.0332 377.068 70.0332 378.15 cv
cp
.890196 .490196 0 rgb
f
75.7173 378.15 mo
75.7173 379.234 74.8394 380.111 73.7563 380.111 cv
72.6743 380.111 71.7964 379.234 71.7964 378.15 cv
71.7964 377.068 72.6743 376.191 73.7563 376.191 cv
74.8394 376.191 75.7173 377.068 75.7173 378.15 cv
cp
1 1 1 rgb
f
89.9634 375.592 mo
89.9634 380.711 li
78.0122 380.711 li
78.0122 375.592 li
89.9634 375.592 li
cp
.85098 .431373 .517647 rgb
f
87.8691 377.389 mo
87.8691 378.914 li
80.1069 378.914 li
80.1069 377.389 li
87.8691 377.389 li
cp
.890196 .490196 0 rgb
f
80.1069 378.893 mo
81.9263 380.711 li
89.9634 380.711 li
89.9634 379.484 li
87.8691 377.389 li
87.8691 378.893 li
80.1069 378.893 li
cp
.74902 .0392157 .188235 rgb
f
98.9053 379.131 mo
91.6943 379.131 li
91.6943 377.174 li
98.9053 377.174 li
98.9053 379.131 li
cp
1 1 1 rgb
f
450 450 mo
337.5 450 li
337.5 337.5 li
450 337.5 li
450 450 li
cp
.827451 .854902 .909804 rgb
f
429.059 432.895 mo
362.678 432.895 li
362.678 420.889 li
429.059 420.889 li
429.059 432.895 li
cp
0 0 0 rgb
f
387.121 431.541 mo
384.605 431.541 li
371.227 431.541 li
371.227 420.889 li
387.121 420.889 li
387.121 431.541 li
cp
f
377.086 431.541 mo
374.57 431.541 li
374.57 420.889 li
377.086 420.889 li
377.086 431.541 li
cp
1 1 1 rgb
f
380.432 431.541 mo
377.916 431.541 li
377.916 420.889 li
380.432 420.889 li
380.432 431.541 li
cp
f
370.375 431.541 mo
367.859 431.541 li
367.859 420.889 li
370.375 420.889 li
370.375 431.541 li
cp
f
373.74 431.541 mo
371.227 431.541 li
371.227 420.889 li
373.74 420.889 li
373.74 431.541 li
cp
f
383.777 431.541 mo
381.262 431.541 li
381.262 420.889 li
383.777 420.889 li
383.777 431.541 li
cp
f
387.121 431.541 mo
384.605 431.541 li
384.605 420.889 li
387.121 420.889 li
387.121 431.541 li
cp
f
376.457 426.19 mo
375.199 426.19 li
375.199 420.889 li
376.457 420.889 li
376.457 426.19 li
cp
.85098 .431373 .517647 rgb
f
373.113 426.19 mo
371.855 426.19 li
371.855 420.889 li
373.113 420.889 li
373.113 426.19 li
cp
f
386.494 426.19 mo
385.234 426.19 li
385.234 420.889 li
386.494 420.889 li
386.494 426.19 li
cp
f
383.148 426.19 mo
381.891 426.19 li
381.891 420.889 li
383.148 420.889 li
383.148 426.19 li
cp
f
403.893 431.541 mo
401.377 431.541 li
387.998 431.541 li
387.998 420.889 li
403.893 420.889 li
403.893 431.541 li
cp
0 0 0 rgb
f
393.857 431.541 mo
391.344 431.541 li
391.344 420.889 li
393.857 420.889 li
393.857 431.541 li
cp
1 1 1 rgb
f
397.203 431.541 mo
394.688 431.541 li
394.688 420.889 li
397.203 420.889 li
397.203 431.541 li
cp
f
390.512 431.541 mo
387.998 431.541 li
387.998 420.889 li
390.512 420.889 li
390.512 431.541 li
cp
f
400.549 431.541 mo
398.033 431.541 li
398.033 420.889 li
400.549 420.889 li
400.549 431.541 li
cp
f
403.893 431.541 mo
401.377 431.541 li
401.377 420.889 li
403.893 420.889 li
403.893 431.541 li
cp
f
393.228 426.19 mo
391.971 426.19 li
391.971 420.889 li
393.228 420.889 li
393.228 426.19 li
cp
.85098 .431373 .517647 rgb
f
389.885 426.19 mo
388.627 426.19 li
388.627 420.889 li
389.885 420.889 li
389.885 426.19 li
cp
f
403.266 426.19 mo
402.006 426.19 li
402.006 420.889 li
403.266 420.889 li
403.266 426.19 li
cp
f
399.92 426.19 mo
398.662 426.19 li
398.662 420.889 li
399.92 420.889 li
399.92 426.19 li
cp
f
420.478 431.541 mo
417.963 431.541 li
404.582 431.541 li
404.582 420.889 li
420.478 420.889 li
420.478 431.541 li
cp
0 0 0 rgb
f
410.441 431.541 mo
407.928 431.541 li
407.928 420.889 li
410.441 420.889 li
410.441 431.541 li
cp
1 1 1 rgb
f
413.787 431.541 mo
411.271 431.541 li
411.271 420.889 li
413.787 420.889 li
413.787 431.541 li
cp
f
407.098 431.541 mo
404.582 431.541 li
404.582 420.889 li
407.098 420.889 li
407.098 431.541 li
cp
f
417.133 431.541 mo
414.617 431.541 li
414.617 420.889 li
417.133 420.889 li
417.133 431.541 li
cp
f
420.478 431.541 mo
417.963 431.541 li
417.963 420.889 li
420.478 420.889 li
420.478 431.541 li
cp
f
409.813 426.19 mo
408.555 426.19 li
408.555 420.889 li
409.813 420.889 li
409.813 426.19 li
cp
.85098 .431373 .517647 rgb
f
406.469 426.19 mo
405.211 426.19 li
405.211 420.889 li
406.469 420.889 li
406.469 426.19 li
cp
f
419.85 426.19 mo
418.592 426.19 li
418.592 420.889 li
419.85 420.889 li
419.85 426.19 li
cp
f
423.832 431.541 mo
421.316 431.541 li
421.316 420.889 li
423.832 420.889 li
423.832 431.541 li
cp
1 1 1 rgb
f
423.203 426.19 mo
421.945 426.19 li
421.945 420.889 li
423.203 420.889 li
423.203 426.19 li
cp
.85098 .431373 .517647 rgb
f
416.504 426.19 mo
415.246 426.19 li
415.246 420.889 li
416.504 420.889 li
416.504 426.19 li
cp
f
416.959 387.08 mo
413.906 382.691 411.633 377.723 410.344 372.338 cv
408.049 360.451 397.596 351.471 385.041 351.471 cv
370.805 351.471 359.264 363.012 359.264 377.248 cv
359.264 407.353 li
359.264 410.908 li
359.264 420.889 li
359.27 420.889 li
360.99 415.051 364.129 409.078 370.398 402.809 cv
386.996 386.213 401.514 391.537 416.959 387.08 cv
cp
.227451 .34902 .545098 rgb
f
427.486 397.785 mo
427.486 397.768 li
423.387 394.818 419.83 391.205 416.959 387.08 cv
401.514 391.537 386.996 386.213 370.398 402.809 cv
364.129 409.078 360.99 415.051 359.27 420.889 cv
432.236 420.889 li
432.236 407.353 li
432.236 403.447 430.369 399.986 427.486 397.785 cv
cp
.0352941 .188235 .431373 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.0.0
%%For: (IvAN) ()
%%Title: (1410.i047.062.P.m004.c20.musical instruments.eps)
%%CreationDate: 10/26/2014 4:42 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2OuY42>a4O<p1B-AE!9^`@N"Ckq.iWK<n?\kuAi8?1n16_NQJ,?:C]"?\P[[TO6c1mkl1E`]u,aCtJWDomOKrt'A<NW`*
%\(^k`AX(Dr@4E/m8,;J#$O]br#@;=bMaG$2BR6f[I^`VQHG+^<dI-_Z1ARR(<oujH'`M"U]_<>(p>;:?7_*OLhrJt*j'o^\(#.PV
%\Y$.4$3Bg0qY51D^4HjaB7emY]1i8GHMp#M!I`G,#<Q/\OGFbQDt2k=G?XJ.]B+LTh>7$LS*"lGmeY;rPkbj:figk!s"2)01Bjs_
%*]3^UAgV<t5P?10Y`#@%?3_W:qT=D@<;N42rl;dQ:&se`\"_m^LX"gCiQk[scPSdirdFmgd("X\S;'7DiWD%r!(%G-8`\flfBb?:
%I?16te'+n]=lKD%^\Eds%]J?D"'A_\Uo=G.[OV7t:9F8cmeshbH0UZq?<>?YY1l1BrsLV/`'Jna"q@d5\lJ2$X"8k5bkr:EWn.7!
%_U"."1/4Z7)?!dH3%B,J]fsME].lS-Y@S]ms4b^_ZW-qgTqnYsOM-\+3blDQ6ru5$bSn(QAh5mA"%=(blW=o8kLpeR0asR&*6a0;
%W;bH?kh$o!jptt^o^%2MmWIinp"#SX1EiJSh0LrC:g;+&r%I=jlU_&cr]^I&i'P3I[<t;?m5Y,4P'&)JiXgn%DH6;q-;I&AJ)(/T
%DnuKgZqnYJ_dDVGd)DY&BHb1]b;O`EDdg\9rU2'4brOX!%,d1.h=dMJgT%[]qVPbbg-5$^DnJ]Wh1Z0<B(f!6_(Q<SMmNsM8)81h
%qLIIU2VE,ao3an?5\J]ln6b-YqUPUaRdX[IK"_LP@-De"LY$3`UlMukRND2Bj]8p]Tg&Z#QKg]m04j'?fHiHJqX7>T$,Y*k[SSX,
%AuP_a%AZ4b)QMRW".e_bWkG'Lr\_V6WF8nt*Y3`Y:YLeSY8Qs[6h\^ZI_F2!%Y+3K?9/:cA9V7)/Om-0kac:Fg?hAN$uR3e'M`MS
%cef9R^R2a_K!1>,Jj7Q/./@nY;*XH64(n4YdQe+g%n;f`G+h24.l88<j$it^$mi\f3/T@lgXS>5`"<B,Cn&>WbPfRdWI?U2U#OkY
%l7LYC1P^U/h[AVGh<^f*Q8q&XG<B'3I`oX59Cj!D$@+"$=dcciW!`RpnBDGFD1+5@<eI##C[g)j(T!J&]@5)[H3H7nEqeaM5HSQ6
%s(OApnAc:%9XfI+k^/uDQD%`igFWrFWLVKXeZRMu(0Y<m(DLu\8,QHg-^"pg>Z;GLiB_)K&3=[!7N;:S2[6#,R9)U9l]5`2.Q=mU
%@,NtKSn`<FY#kL5.B!jGY)AZ*fb0H<0q#<c#o]4r.Hl\s^+Lna9\@Z*`;I83&otV)\OPb`I&p'iV-Zk^$T=I9q%tE71(F6d5>8q8
%g2peRcohEUXB"d;F+V/qaGce`CEZ6<9LimFgoL(j5J/h!6Z.9W1pu%mrAp;HP=b(;4*9E0ck^>D?,WE>:+!(.o`gC4]<^>`g/L[F
%0di0+;XShLY4m>E.kcn!+)7EGfo2Xj*Cms,IFgQLUbj@Ha3VX;93f.f8sMef05Pc:Z?FkAF=Z2X4'?8G8k%,"d5)D$M26>ql^#@a
%8jQ)%oU=A>q-ZAVb#0dWhh20d^QT73/U4\IqV7@*6?;4kgt\1l/ZtTuGNE^m.p)&&_,4pZCtF"m`L0@BQucnXm`bW!B.cW;C[TBj
%ICZmA2tuFr^>(A&5K:t=j\h3s,JMrjFu0&d/anJH3'8]mgOJ+:K<'+cEjP]bhD*-)]`J#l8RjGHUX,[rSAK@5orA8b8"DDM;u&@m
%o4tc9G05GDY?l*`NLmQB[[U4>:Gn,8Y?mu1:I@Jf'j1EIg6_cfCTho`f(8`J<l65+fQF@i4ecd?=*XmB@Edl7cs;IBcURd`&]O[S
%OX;t7g0L&hV)W)U%D&rf`B1/cdh*:.5$&&W+p1cppBIDDbq.R*.3&R<HI+'aoBfS^?Z)^6.fRPtdANcfE;Q8&]B*=S_!mO*FZ@2$
%K)_=aUOQ2rjkjkG*S#7B9Y"6>@]#mZC45$tARk)9l`GUb?%d"hpRuRTQ>0"D%5V_j>VIcaod9j@2q#6.nAcuHT5mW##"W1$SYoWa
%kHhGYVd>#3['S"H]h^S<Dic/9@7d#NMRQ$?N%s-FN)C)s)Utb[1!fML2!EO]6b-FiT/F<2R^N-ehAg1U$,/s+pEGLm3[aQRf0/eg
%P;?q?Uu./Lk'[)-/EU)!o.6M%Emu%mjn%B>Z*BHa!iJ0GRG0mM\(cnEY35bQi[AaA':I&YF)nVYR+,r046t^C[6@-feGP'Qlg*Gm
%XK3*mb`%IPAj3(t>u^,l`UIKNPqUkIc5G3u9<eXpTc8$YeC[Jl?8q*q<glZFF6,8\?GGhGgjje)<#=Mj?"]u>JBs8(]&Kb;f=A\0
%3",Ea?Aq[Bq`;J/05-i4Mt*cG_:1!u1`$(l-taic^N0.^rDPdTZa0,FG_(HG;_e5"4?#WWNQRcY7K&L+R&P:dF"%T0nn7&bbA/)D
%%=2&!c1t'"PO"t3+N<<Z`T`;1EaA=6OMP8Wb?)N^X6\PX$M@`';6G0=TZW15B-t*XAf80QEJ?OgSk^am2t\+cMX]'\CcjYN>[[%t
%<[RO8)YnA.Z1MNE:Xj<-brUlWh&<1:VH^g3'#:JJ#q82#1SYT2gl/pW[?%;XUoX3aVeril;PkA_lA\9E<3XC89kXk_PXl,cIn9c:
%Ui!(/FV3<*\%Ha=oP?4k/,8sM$Hg5_f0toaC4hdIkgC1*iE"Q!7_/&5q.C%45bn(sh3>LC>@&+;X`c4KH72iEKB?Rc!I/,u8WBp3
%XKG'R?jb&VeN1FhR"hc:l*W+<'Q.>@NDnK$C29TqD)]p[7b$eYI#o%gi5@]OA]fmRfBQM'>P2U.otC:80Xq.;fiFVg-H]:IBU,'O
%M3<U\=ZI%`B;/'uHo=^HW-Kjb&Cm/"<0U@n@-Y/kbt:G#1N*Imm7bdIehc?s.&j(QqK#MOL'"tY\L;0JRJJ/EGqR6UkG"bkSEIF2
%IsP"1<%^cm2)k1IcV;PN8OL_OD`e[G;!,;:;lnkS$/j=6KR#2mo]MsERA=!UUTa6QAeoH&;U+;,[)R76j_PaZ99nHnT8D7%\1p&Y
%nQW9.:(2#>rPI@XEImD!*+*]eCDQZJ1pP5,WUt8\MNcAebfob60Bk?0Y1HRU@'8,DH>Th:AjW\<G6'HXfB25L1oiJEKljKJk$%.]
%>&A/Yc&K-A<h!m4S"eHo';=G:51H2njd(K%QT`<XW<9s31:m69ZKKCZ"UjJ9BYKEL1@sCJ%1/9<If1@lZ/6u04MKh0J_+tL?-/H_
%'',GU#H;b)Up`(Zs12OC4gHiZX;,YN1[;QKA5j6AX^p@^FncjR]+0>3r1;EZla\<&5t#A#6;=Y92/4J%2cCH+e26h<js=d)-#2Qg
%C;s.ODcOJS]f#Y7jbO=g]Q1cKC/IQ>YD]dfElFAZ1Q?;'6\Qne*oro\,lU$d[nlNNr>3rXBB.WUlL2`j'X2:QB9dYHe*_bnYW#,C
%Y5QSC[?5j/nM@G_5@$(E"]@b'cI4?Bo4qV*(UReO?B8Ac!R-cl]1I/,;?U7N7ic/1QB!]U1lRm0#S$(ld?$hONQM<]d%F_f%HVK@
%J(F8gBe6OhoHlSV#8%bOJFf7Zo:(4#oA;cUrd2U1qW?tUdiusolMQu\(f,Z>ANf-kcd.!:k03Qh^.L.Fo,ZkZcHglfMaj>2q9I<6
%k@_ND1`,a>h^OR3cHgn$B>/l4Mb#"'K5M.lfYb)HJg8O<>g0'NWE&8lg*"Z+-o7XM;H#FF+dSa,UXB'f1*MYRkuf)HXAlF8CC6ej
%5I`Uq/ql+%Z^Ga@^qXT[Oh]Nb;bS48Q*cE%dQ6L(1i;!`NJ`hf!aS%XH<tA-2?[q=*38pMHi6IJh=1:,?*CirmZq'%:CCbhFI#PR
%bi<?b)*aTTlT:0"c/WI.pt7cY2@I7*Q/]m0CVXj;"#Np1CYOE1'Ju*TXZ$L`;9qNt<.WrtR_pt93]S-*[#M4G2l4=H:IuC;1F`%_
%4D$G#0r&'qX+4@#]ig[*d_)[I;gs::7/W871]Gi:\G]2.m*Q1Q(k-LR[cXNEhA$:=k(/k7%_RTO$O:!+'SbU#o>&O3n1kNebQBNi
%^rnk01(V%A"#$"oC2^loniVFZ%j5-hO[J*Qc#a*QVHqN^:rHod5FNCXR)XK[;g[8Hg5A\$cY/es9m4ul?>.jcqrR[q5j9gLZC=[$
%,#*WCBeM6(Afg)'-K^fXmp.6g^,]NH1nOOQ1Auq_1OJ/p!n27.Nq3TOo?D9P2TJr_DnghnRo`sc='rNk1&]Et?TL;"=5/43p!Z"/
%W0ueWnu(-S9Ml_p5P9W^Zn7j`%n0Mt]MqL_Y"Qd_cnK2VLsYY;ZnM<Uf3[iJXlo@s20?NH8sT<)]'MK0r#X8\?h=AJATi!h1GEZ%
%o,EaaAnP$(*ni/iBWA3d9U=$]04!^:d."Vi4OlticJS;0Wq7mjmb5,<s+L-ZU7*O./</2,NCIh'!k8QeQd\Z#)C,6RGoU<D4FnFe
%a0=]GN2\^cSJr-\8419WN\Rr5mQ?La.m*,\N\RYNHlg=qa"_0ONq)#rQ-mkCQW'aQh"5[M>.7c$QQ%U4oe^k/pq)C\#eHY^)DS?[
%Et@L6OfG:3h"\I:C:+TLomUIO\1Q^F@Cr:\,8G'Xf%3>qjbiZ5Y(qfI+fh#f$n0dCFbif84g3N2^(7kW-&ij)e:*i6lDCW\)c^Q"
%N?$5:mNbVPr?Z[M'mE,c!:u(0^I@\;/+1V^`LUh&2j!n'1gWb#b3c03\(s`afi#/@L<&`hH<d7^d-h>>*"BJ,K*H/fZQ'[l3Rpo'
%=k2!h_p-AWr5KIuUB79lEjHCm;NWb2p^5g4lORI&RBYpOpBl-7j&%adB.;pmc(s.]KWkA#ZY\3Q'2g*[bYJlTD,YGCJ.d+%6Li2?
%M8`i"I6.,a@[l"mqJth$d+k+[HZO7H/kJt'hV?nU]BCkse%E4*2TsmFRsK#@#,[0P.',,skN;d!DtN3j8Dr9oS%E`_G:lM-gmsqH
%F".&0o4GOSWQ:L>F&V/FXf+1rTmPO3=&6Hi1obcb]t&6+EjP_TS+a/.%4fM]_DA]<6&$h[VQ7FQn[f4<RBJ+qYE(]I.ku[!-*EB?
%S"mX!VEi/o"JZoDNUk!PCF>*^ja95/TQ[5<WV:nFV$a?tqEGp5U=>pnFidq3pZ#mu*MoQE<gHSp"`G_hdBD)WRJJ%=>5=V*VUqaL
%H;rZSJ+]gL*g"+EJFp55[hOZ(]g9,.Y'>_eE]Qi9dX:I6>`+Kin)VcQ;G7&\n$FUP^X#g6+E!!:k?#[j\M?ms+']V1.E]kjaiq4u
%]mb7f"-8QE_XJ@?9H>dO[!FCR3ouqiD7]h*hG#CFD5F1GjYbu*P_!8BmBm8%SmnlUs''CO;B9QX/[*iT.b%$%PgZ*T0E4d882HNa
%p75E/F)13d*P..klo['>?&G3&-i=%#6N!$_UG'Smia]V!:T*%>/js+Baa_*fSQV_$DA193UApfZF=;7\9H-DZ/OB2!<lEc?RKpIf
%_/=gRM@K&;c14*6`mp\FIQIFrm&&lG2X:8>EdabV5DtCMc&rs07M8iZ``,$ukG-a!BMbUR*_)EJMU8#'*t@=L]mnW*;S=>1h]/P6
%Pt_);GX9f'l8QfV)p3PHS5,V;m<`=])Q%q$9V]/\HfGRg)eUmW4F_0d>)f-2Zbar4I/I"rAl9gj?k&b('5t3X`91aG"$a'+bq'e5
%o/a5,Y0!/EkUo<?N1&&O(Kj+(Y7Pm8le\!3Zrtl`C.8g89DU)f9W"2+9X@[n%BnToCUC],`iZZ5<YIE-YJ$W2iVl*AO6^%<1LDA:
%-&"'1ogLW:DF0VIh\Tk8(39-Jcir=m>l?H`AE$[fB*QZ;/mt>Ir<gE_4&4/Mbpj,ac`im.I;goLS#NfZi`bEe/06[n"1rW,qAL0u
%:"t6Ue\#e)hYg.\T348jm[$_tbjJ.m-acX*,:4W0:"nf3V"HT\PN&683LEAqEg)/-CM/mU9c(.,\X6[3R&N#OR;H5FEX938Gieb"
%>Aj+KBjO])6CGUXjcug+H<eZhRgHEb-gC@CT(C=L4S0fdVj+YqUG;L^IWY\:;_3DoMWJcni.@"4/`_(Tj`nC;%3@k\R#.KrQgN?f
%oKq(p<Wmfn40?!Q^\mc>Q^qL_`oXts])=uI<S[aCH/<<9h4ie'=r'=(U1IGFT7Nl+J3O@h@D1?.GX3Q#Z\SSOdl[&Kn&bnrJ:D,^
%f=!O*;R2U*CA`_PR'm;cfXbje0)VC-[Up^OePt!ALh7QCk$8J/nM<YkrP[Tb_,&qgp3/u+1+tC)5:`/e?gu)<S3%Ru$4'Q+1@eLY
%[#5?U8=du2rGogApH9j@rrf=+9gr!;(tWeMqE`LcE:pQ?U0<;eFReAlI,F76.I[ST6R(CcMu8P5iNN:K=5]^Q&=[(OMbRI`3fQg7
%S7HO.Min->8q/u$ffWt-YcIdO9CEF6e-H-?6G#!dJuMs&pH_OiN`UW/8e_1BdDZL68nRb3.lT5A>7JoZQFpE$9sE]O\YR4Y4s$g?
%TlH_@s&:pY1s.66[;\6OpK9I^][uEhs!W)<lP$`KBT.G.kfO(]oV0+G4KDZDO/:f5UKonS-5JWd9`1bh.Cd,fi(:V90;qUj^Ors;
%1P]<:,uKkX:q?C%$H;+p13S:W3)7MO3lWdMXc,(mII2W*EM]o5,J@9r[aQDh87uM\laN?^T`0D@Lp$EnBVXMr$gTL[V#H3nF#Z1`
%k>1,ZZ^,X8p@f9BpC(a+?DCi;3GR>'"%.>Z`T^^1,p]9FCM/:.<6s//%cIMuf2('l)U]sE#nmA)VhCkfoLqpqk0^)[*`+[tmIiMc
%:>1+M.aU!-ldeiZa6X)"pd\7m5EK@80I=E=4<4V/lt]ON8(6djX'f(9!Aa)>Oh"C*_37hR-ab:_W>V-LE6.FXR<#cddOoaE)(JFP
%d5%V*00j\ij)3f0>,J9gURS9OPE:HSh+DP7OmRmh1,e@V;/3#a`J^KV8A1JVec1o!'JJb,Y,Z)][Ue[:G,*je?qcWO@t3GH.im@d
%W7n4`rCon7!$<:'h=>\sVd->6&)Af2cA-O9YLDnM[jsE&P4b*pc/]*-G35IQl[.HE'V2_eQ1O^B%if6n3q9XrVGlo-?/SFucj2EB
%;p=2(VHXf\e^>I$B^Ee=o&\G`Epk\-7u`V:ht;;%pP5(qo)@ld[]B(Mq4ulGp\d6N=+X]_&_J&p4$^*t+sJOYi5+Ia,RRO-o$IiK
%G;e]L`K)[bC44Hnrpj2qH%]rEc32I&d)cuQX*q/T/1)S;)(@,2)?D)B+-t'Odm<fZbNu]"o#s\Ad%bbSNeNr$+*SXjPB,^!lO4]F
%&GbP!#AE#:?Ut./7GH;<hgJb;j$So,^?4(NHD=N_d!g-$24g-25UCO4Fa"3VqK)5a(:5[$/*-u@/CI^>EJ.X<%de>R#q4L$\lf!6
%?iT*PJ-%\WR^`=]9,_bkA)*LtD<2M0A88rn_Wkmc>@+0;ZC0(hP+%\@rH\\!F4jpIMlMt@Z>t-5H#C)NBJb*FGQV%K:Z8J`$R5t9
%?GG5Y%nm0p>*_JfEKjOW19R3Bant$S-?NL,e2smt0qe"H/G`;\`p_^n=+0.n0!1k5+2CTQrud21\tqQ5R#\r"gHW>g#>YgrV$AeU
%Bm6Ua2*oSEX"W6+khggM>QQa&65T#)P,'qnj$4Yd6i1Z,dckk[&XOo90Y(JmhoKt%eKui)L:$W6mSigJr7u5"_^_;D5eduQk3uF(
%dSdKKTlK.>'6HmU/!6&Q5.20cO/"#fYi"kB*a>MqG"4HK0RUaI%9T`"MJBXE1WNjI"g8-RV4'F?R435dc-,:Y_d?#73<ibYK^JWX
%'CW[D4\=jlgVl_\einX6lIA[7o(JX(OuakpBZOEsmZ*UjM(nnK%SSJ/[<c>-QUkppm[_l)c#RG:Nf@qb)=ArqF+PE%QWIW\Q$*Pt
%[?!5r3'+9XTQKC'k])ToeSMj%#L,AngX*51](<#ZrAWN)':VjZ:VoRA+8@[>QDTcdF'"Whc0-WGd+cKn5:04\X)o8FT49\a2la62
%j(08<J@T?X4#3Xh^%K2C$r$;M]o=80F4rb&K!,<37!2D6n6,3WdRh\K7/QY+R[1%@j<^&@bX<J(X[*ib2D8jmOf2<lm;YdYg74h@
%2lTXZ'O/7NCJS]sQ-pTQMcn1G8`BdG#Rui<jHnn.1m<SNk=N5=)`R.-@A#`<G(rSj_u4B!G)Y.ll_a,RhJ00Tc(!h_H#EuU'Wn3K
%GB2_8RsqKicW2!J(/C;.DUdq%g9%X6(#/Bc-bZcc7PB*d7uPT8kE=RV,\o876@)eA;o+R^NE=BOYiVFAdF=f<*UI[G$&oiQN`u,_
%e<<l]1rS"H]rj;S>M.*aUK-(N.RKFIp,CK[#*/BO:FFoa%f<MSdS9osLJ2i37#.\F%S&>i40[c`,u$T^KT1"=$aH+`HS^-#G,I)j
%<C%#b_oN:FC`piJod5]"*Ma&R%"1+OK'?=J]bHqK26.0iQ#X[XNJ+JM#Y[!ce@+.I[Du!EV)d4$UQ2'<GJ7ANK?[]WgH!@>DW]F-
%mbqJAeL\UEdFL-C0g7`;[7rKoKTlqj,hj%PTi/&&`nAPb'Dn6crgD@Y:SlsUdenASQ<J>-GYa\\Z"UhV*LsKq->at>s!!0&O0h\^
%^6.gg4g358:^AH^FJL$!k#LRA0/HMMAWftTg5Pc9L#A5d:,_sr&<U0Dd1^gFNQ-W`^%6OT%0"g;K-/ij@H6VG4=$jeTdcEdjaLD2
%I-QnurN(FQ$W`V<BN:)J[b>/o,ZAVYO@J"@8/\PZ1:c5G&^"c0$Y.L"_9,2HV]=-Y*qL4(b);A/5pTtTCV(tR<elgIPqoAm;7Mn4
%d3i\H_;!L!*-U$S%Qd,5mL;[SdY)eQpCApm/SmS,?/0'bIW=Di%#_P5_(fhlP%CB.@@kSnRUQ,?^]';Gf_;s709f[$f$6(Udk+YK
%O3Wto<=sU#<elgA5(?R!P&ak-MG=8na7TW$(ESN"9/G:UA,,UDekl6=\KtIi5'%7X5J.fjF4<K@E^M<$76EB'K'KK07^!?6C(T`r
%^?4*cSS'XA>?3eC\SD!EBIFRKbbKC:mdsXUU\Y+8<b@Em,d.X2G3/=J8@,*jTAa2U@4R-PX_u[;@WR>#h-J&P!5V[HS?QB`ft6uu
%C#eTUqs3?fbKog-HRi<ih4<]]g1fm(Zf8+K`V]IW3SV/]]mdP0h-&K[^%;#QnRScol2HUcm\"#*\$[$tJnc-H'W"n+<]FAcmV]1W
%aZeM8=RPf>HdB*"(hRj&FK=`:HIgt7IJTtN\RB`<q>-l,PsRBUs"lW7WVRY?ZjXj,2>b9d^[UX^QLSBp3S/)6H8*>:Z_b^nSO'Mg
%gjQg-X`=@m$ra)RcV>+"]5,#9qou1&T5mHtm$lCtb3dbDDf2']5B!^tZH]5_o"q'0\5TNG0Z:0SfAjP1U%\;a^"(bO]N_FRSb;Se
%p'3IlOg"Kd't*[^F5tC@\(hQ<h91:.rR-FmmX6bT<d/J!XZ55+jpkJ\Zl"XDjlui#EPF(X<OOF?X2Y")EP0#J>L;gjD7s3R]!Rm?
%s14Tl"qMfjH$8@e]i$;Oj%o?Em98b5LK9\jZJDY?rOQ&0nuTFQ=Enk9V7ZA6O=M@.qi1eAfN`oLVSb+=qO>g#\Q7g@F6V)1oi8X"
%ku$9F=*leff<+D>9BU)*ct0'CXS2oYBA`IM\%5ICX63R-0ZiU<7uJn@hH%PND__dj9+.6bh2OL7\!LA6muJ0+5?`7Pg\LQ0V2[Fa
%O)*IkS^5gSj449no[nJ7#H-[Yp""H>6<68+3e(P>#Q]?P/LfuJ4"grAjc+W+>>$'L3/iQ@pd2Yj',X2!\\2e*02%@a)rdcT\(f6>
%I=?J=/,,pSf60H3h^M3Z+)`fJKdWdZ6q;/;D6-gR^&14').3mOm;89j0[OS#=b+BP&-[4Hd/g]H%"anV[L1'nmXj&;@TX_RDjB*T
%iS.8([efq!G.E##mZr"dqUNU7_XZ[Ad93<<gV6s<OZV!5'S2eQq>D?/W;9s"h:F$,J4hH+&S_2a*qn_QZJDGXUqL[_C5:PD@O^qR
%I^&J>cMCb:-0uM(ffiH'hJ=(uSeX2rh6Y_Qg5EF9BU0XEhR-_q+"f3`[G<LRgl.CKZef=0:G-eo_lPLS)CuX3%<Y<hB!/tbG*G%3
%o[l3=Dlt2TDs*.Po`oJS%aClhH@PYGF`/Gi#^+kqCcs`$Wkj8P'c6=]*otYKK+H]ab/V>NfBk1@hYs;C!#+Kc^lHi<meE2B1:OOZ
%[>7KLH+'sSbq9AU^pE;GIW%Erm=!Z6;9[X`3K!\2UftuDS*rq4-HsBQ<l97U2XK5aQQCS-H?s\rd1?pE%,g+3'm@k=4;dD7"tCQt
%WNEjNa710f=+R!0q`CA'-a((gDS-tKandVL4Sa<,DNX3hq7*Uk\?l&hUhedj]@V]nIII5jm)@DJB-3`@URlo9SYj;3(J53^qT%,u
%mdTPK_J9%s@Z`aNh1'2$NaB(g2r>VBQAaMCX*68A`fdY+.H!a0Hb')Q/)IV`hSI,@h!N8[pNulFZqqZP<n$e,hCjG_HuqSsd-*TV
%gV#($"]]g)YRf##Aol;U+1>Po8Yc.lN]3$cH[GS:pEMQ$Kfm"LW9*GsM/3J'`T$E?>A$>0.,^Br9?TF8qPu7Nf\elto15K<KPbk0
%]tJemGm'(RobNkg]=U^s+'CZ'20ZRCfuhq4YGt.K/SoH,GlIX*8o\@qHpE0-C/,kZ\Gag5c%W:>1F7tNoeB^M[e$<od+E_eZ>/hm
%I;tpOI!M:3n(kReXZa2k-*Qat9:P_*@utg*OlDq54].O^o1oG?@i-Qh&N;!Qrjme%1/D9*YL[,RH\Hrt7%X]/j:Si>?0*tFMRL&n
%37*[MFLJHr#&7gfO,u[^eeY]?)0Ws9i.03=2?WRn#@FQ2'1?K*E$?Qh)X&Tia<7<Q1STR33^VI[obJ$)I110'O\Qg[IeB+`>olHQ
%8ft1q?\sjl+ZHqd@`OFDSZ]^7QuGSI%>NPtW<m5,n_!Y34W-UC!Q,=?#(M=($9KV%LfI<44<hAR?`C)6ka`7k(a_;;O-9]bm'JIp
%oM\!kNuJ!I,V;kU;TK&#/d6?NnhMc,Jsqi"HGm2=$M$4J.&7b#mj7LHBZ\+F!?3*i;&ZZM/_\7/-p%1n>Pd[4W;bS*$W*"UaOEB`
%KpN]&1NEdpAj&D!5>WRUWe-Z`nWN`CbAIWCYsLf_7hJ!m#+[tRdY:.pYXU8mN&2o6BcFkoK]RdHW"8Uc-_>p?<nhqaXarP5VMgG\
%c*_Qs[F=;HE'E_!m2rm62pY^I9iX?3@<NE0Ne&eEU*WqnK3&F"`T-sF_p*=8s45WlRs.[,]kul6A7J/r_QXt*[mP^9^O_@_fThdK
%k=p*8Tm=@`h$9G=_8h]+QG*9k<6XUiGFt"a&1)%Ig]n\9Bg5P_m?Qe%;0`*$]-.]kFmS3">)0;&L]-&kp/5UI1&BKkERS4Wpcca7
%K?udA&U$A[IF%<B\+[qL&QVsh_AdGmd5m36.TmnfHKFfccMmJ&T^]&[n7to,3V2Luh;%V2YL&">\@l3.hs'NR?""D4X=`)I5@jrK
%,!4Yh)"1Ofal0iIfUH`mrp2d$e6_eX=6o`*_5,reSnDP<f5?'Xmk'N@Q!bH^>7(NKM.9'R?#HiJq"FD@?iO`?Y1K*MVdT?b<.QW^
%^Y8BI[>ih@KP$FPE"<n[_lch/7;k-.nZX&=JV2!se!1/6G_B/pj0)k+mG6*\/\TK6efR+['CurM<Q%lt#O0PM6Z3ibRQM,X:MC/D
%<;d:r)+lIW6:N7p7en%u*j`A3lX9a,"!*HL4c&q=&utB1pH/s3<L8SMNutufSbI::]_62:d<:Hb_u7<\p#+;\%jN?:gE64VX$Z4H
%dLKsX@R5?;h<(P)mOW5^/h=1[)u%WJXY7<]jn$AO`U277X1$qE*FAq-QLCu*FR2Wag"*5&9q^Wso;)]q%,NYu?G/IK;_1&0qL8c^
%^3re^cNbip9'Q.C-hO3iK+lsoF.A`tfr&%i994:WO+$j#S:t\$52SDNYlog]IP"g;CD`?4Z?<<5\eY2f#T+t*eRh1b4lmtFr'M;;
%6)QDFoW'$:(f2mI7GQ#!>'fb:r7rIRaPL0Orr+gcQtNn&SaYYMGH0P.DB<r.c.BF0RKo:77uIJo6c#hN+&Jju3U7,fVVP=H@UYWW
%Aa&0Q[sd%/:H$g3hp4n\29fsm?EXh3^ZCJ^Qf#[dCCR-8Bi>7YSur4-H8sE*n[(cj>oP(KC=)Uo?cI,).@7:\#ssYZabj]lmM/J*
%mr78AQ8$-dI#7u2I'DL10,DbBg=#$UT-)(b9G%_qqCP:^GcPq67P)NhH#,V_'X@toQ-H_'hp-j;lc?YCCun)B&O^T7o=\E_XM.or
%oN?Lt><VSlHps@p"Elk\7m`c\I:V?_YAH/k*oj[E0h5Og>C-JN"0hZq\%VF\W_$Ds."*L?f%iFFS^"ROhs9U9V^JC3C[[.$=000i
%`HP*3%ZS*q`q"KB.<R91kG"r]#k!)T!d"-F^#4&,8n;F6G=ojqKP?/'7k\b8j4eJjV'FXgT%r-c<a)+'[A*d-Lpr`*0*XFX1\Yn$
%ZJTm\A4;>gk39`CBNOr:h-5='-?iGC`:`>s`6mIEh!D2RKA?IBlK>SO(T.JDrq7M\NF__Orq'k=jJMP\ba)&.MoY-rX2C]IO2!V^
%VGD,IIXb8c_EZt+%<B`ck;95'IBtJ40[4:/*Sp\.;I"%M%u1(\Ss4E+Y`E287AO:nCc.YR%><mAKCsJ+n,;Bpa&V0<M0:^7d+!5F
%[3(EF78;@5eW]Il-6H7qMYl@]1%/9.\YDJoh.eon*(=*2?Jf#BHe"c\PEej9QKWGN;<?V(=?M9R\V$[%mr8B=e'$>b^$'=9'c5$D
%'C4ILral)RPJD"Ar;FXlW)l.uFt3gp>K0mL+.N3^GAb6/U:_s.5'p1JT7/9`Kn1d%1(3+8gff2V2chN"hYD!?CRo8_N26<fYU_U:
%Z+$1R7bR[Kn_iiP0ad`rp;uTT:=Lh-gmk-dG7TVPGO?IQKhJ&H^O5?K-u9c6ktZa*AF&1u%(#Y:8cP/>3kBMc+u2r;K76H;W$PuL
%`%'I?p!X0qH$ZBUc[?#PEH;qkK>k^uOVrfi).3,#[saLIh1JYXpq"uY1:NL19lOGfUG):JV6t[bQu1cZ*PH`=^:EdDK?$AaNL"T<
%Tau)-r-n\!QLXtJl_fe-)>@(W.dXo@08nLZ1sGd`95m\8g[YEQ2VY`+5/R@L&8^WU^k;F?L4-/&cE3GP#OhEa\``G3W\j"9k:`li
%C=?IKS9P$OMkK_:c;-fEbUU1%ourYdCiK*al?DK(qcfcV5&1j-*nD._db!nV1"U*pVAST[d%C[&J`,8*r9C2soB.'nCr9tj%TePB
%C2L5cQ92VDcg'7RfEdL<X[g@cj"5&?@hs72NJ3`LC@".bmX.2``L8A@hn>##Y+_,fYrpZg?eeWWa"[%cPN&^"b:<:tYONi=K,(23
%L%Y5ZOo!TM/j<YJe3:1Qpr?a2$U[F/Je.1d`SG.O4o=mB:9h&'iior>0gO'tohII=XUdn2."udH5D=7s*<bNk_`RZ6r:>#O@jV!p
%Go1@?D[1p=T:j`C*a``-c?%"bf'D_BhT9E[.I&V%Phts9RKQa//+5t=F'./E*n62_qbZ`GX.j,&4P)dOHRQL,j-D5fJ)D$$>l[1G
%rZdsVi-]6mo&7llSV<W\%LC>T5\f(-'gI<VCu-K8KT8+8L:0!I'XE'u)j9\S[[,[eLC]\&Y`=YGn2*$BFCr)O\Wo,5*7&s)>,G;[
%<BSZdlcZb)5<gc7nlFVHer#C3G?fEj8Ru1V\q>KGj:4sH20LB*lh9RDo="6b18$OtG.n4)1Ycn^R()o]fj909\">`%][l']N7ffL
%2X<NYa0qFe@`'[EIBh^j[L2`Z2DELCIo.fR8Y1"\cu@e6C1[:<rH)U;];'^k5Aun'mbZf80&;`blp/uES)h]7G;.iq.1]gb2e`<4
%BZ1FXFpo&[o\k!Ja*1kpRkuSCDr(<ZMY@;qDp&u6JL^j5\`C>#PNJSAl86-/f_Y;YJ$Z@`IFTu5>?i`=H0R#S4QRLC-<X$srHl/c
%r1TbAnS3Y]>=pYgKn\9p;aoqTcFnOK%!uT_WQNBZfq>P8Ib`Tn=r':Z@('$pem<ec)&0i7d@)ItH>keB5o-ChhNkMfi/2/B/1B['
%@BXpb=K('Agp-_%qi?WTNU1D%R/302;j`^(6[S4DdNP21/Ig$crh-*?O^ODp`r5dO=+0sn2<X>uqO!$<L>HhDh.H,l]A&&&cTZh3
%GT1"-LQf_!_,g`Im90`Oaer-Sm:>Zlg<]:n(VHrL:Q*9lcRZuZqqb3B7*hV#,*\)U2seG"]t&1G^jsTi4!0uf:YR6e\[R8ko3Qi9
%P6FS&f3cA6bpl@[b;N'"Aj>3NB)_/W`qNq[J$ZKTU,QaUUPY<0?$-YbQ$iD?n?BW1YrD;lDu2n=G<6(E;NjIMqhIVqX3*G8-$pT+
%-9J$>QtcF>m%^a[=,VbuNfH&*JJiKXV,2!i?GMSIoO.!4I:G^5/ONg8K!IHX**'me&Cuf7doX#fbQgS\Ze;La'i$(*.2j2^&Y'X'
%H_!63QbHXa^HX]E*G]3Wf):TVp@@CK>O\cG$q%VE0A)7KeWFR,^H[*H3-j[-^p8=bFQ`UBk:8"*?l=s^IP=&3ZM4^Tq+C1;eU@,_
%#oH'+5[cnW^-t!b+][p[@NVF]_g9"'?%jU%HF^PY/qS<Gl<q0llrHiCC#HuOeU$i#QD5Ip\59K_L,oh`USJXnI5l'YC@0>?'PL)I
%Hje36j^;'`BP3FoI*"POnA#?!!)j6mDc[.P^GpR9ocmOFI^WQF?@K4=9MNm]d<9kM/!"lG21KpQ]T6^h:'BgSK9!@'CObfT@`lbu
%iH+trS]K3&W!_+IQ/B4[=V,S]?\*(lU3M0#U%ku4peB[4]tKme4BoC,b!S,aGIK(Mb>h/-GcNt>i9'ER3;^a0aDF=SjIbhaoe.hJ
%gelol#1'X`Nqhm33S2Q%`=P-!7:49@Dm"S=]k+ZrO4;&0e'ArP"V)K@X+"u[3qfVY&F19#F2U],0&G>3Fi%+Um&bX&)p<P.5IHMP
%hLEn\DlmiXT!bT[]C+q</g1$*Ds_JBq>.4SpMo"?4fj#a.!J`r[,mddnde`>)4J%N)0gS8KAkAb<WBhS@HLoR-*KT,9iC'h/q2Sm
%1^8'fX52%ub%7cP,\b21^JI&T8e+rWT[hr_r."Wb^YPiL]kut_0>?+V<<,N+2U.",IYb1%jho80ikg(*__h5WPuNl:679FXcP`)_
%qlDMO:l,C5N9Bk7FZf2X9+$WfhfQ]G)rjdJ[/Y#`%E%tmA%mB=DRD!-h0.6T4-3!.]Ii)lbO9TiiT"1Ps*))%^,>F)\,U/=QoKdb
%*qmd]CqJ_Fo_@5`FmI9gG`<q:g\p]B[i;lO3<@s2G-%L\aL9!V(l?4_G:Fh"DQ8)X"D4ROj$:2b\9N*"lQB-oHC=c#QP#Q>1GFMb
%EOqM4qoiheHK?6YU<9SHlDOs[SZf"h/S*!er*u,Nm$Gu=AmY51A,(8/^Pd43ZTZBO)Xo2s2_8P<$_bD-SsJ]E9YJF&AL-rYS:Q6D
%%U)+qVVfCR.UJuI=#e?j7[_$gM+)d6SIXj6?:V[pjU;aXD&)9CJ(PX"/B.c%%KPg</OZPob7%S;=P>o">0W.N6I1p7]eeVV?_EWk
%S\OhmhUK6R;p75)P'ZFV7GHat5mf/6@;JB8"HQf97pY&O2aITc`!LDiC@'d!EI-e7MT`2A,g"1eMcILHiDN0g0334,N9VHcJS!Vk
%0sp=>b&b5RLr/jM;f:nDB0[HYF_""6.%U?=PK-8K9I+XJ?*YPQ^2GA8I>QZ-q0&fBT=f]o<WsDBl1p>_icZ"b;E/ttEKG4u4$"<;
%:Klk+,L%pZi&HmWW23U'TJ[%j,IoX`AknLKB^X!O5fPFb_ncXseEp<:!(A'-/XIjg8b^Hj%1;rmPSkEkeq@L/j67p'*F_8P3K)S/
%rb1!kooQO'G-PRPm\KeKdL@!HOcIEs9,L]I\Os>Z;XTmo5J?K(IB)g@2-D/`V_gI!0g[7&NKM6\`E76OX6O3($I`4_e]1um:1(#:
%][7a2<c%*5(s.peClBAL-hu\"Ue+L<,lqIm*B:FQK`.]oi,B/XiSb/V3Vm_;p;trmZub^!+]h2+YVKDm/;S=Jg/$<6]OL-QRA'@M
%(@]9W]^5BZo]cdc$%B`\'eeG%^MPp)C/0Lia2s\S/Y2h4^I;n.;'0=@/b78>mn)'.?gecGA*;F`d$bu'jVXH$%a(IgU<!&K%6_/k
%mdIpi2aBKG*WK]CXD/Z6NN_n$Y+](pfSuUc0)bi83gsoQp`tl0)Qpq1iOFnWLc9i^5Mi1$G1Om=n:-mVr=@J&<`,(]<0BP`:Sm!e
%"AnSrNG'4AOe&;WMDW5nC,ug$=BXC$*'urC\lh[+Fi)!mZ]8KtUS4E;;I[D"N_4]IF9<DX\Vbq<e^dI>6MA9G>lu71UZqP-P+eqf
%XY[-MnGu]s[BmFHU(Y:7L.YPoj-iM?:&Y5gF]PhjS!YEdXfUPbG'(Ms:shWZZ!SP+@=FA:#e1i<<e?&S,bmF>Krf1&/G,CslLa5&
%Xr+`Ae"\=o9eTY;+R663%Sr7M<GY)G(+92(.3t*).I<ao87-E`0-mKc[1,hLk!_$^m%KaE/Zdpq'4!Pl;@sD+/4#Jt0C5BuaLpZ6
%eK@5U8P*H7nt[ru'F.^@lPcctdUH@690[*mVP,-K5aHt1UFIUlCP(K^B4D&k)7O.r9q&g?JPi^"l>X\pG&;m%;#il-YGmP!USo-G
%;V)m]UIX't"<!P=FbF][9E#&@&'aD*^]*D.(*@)D^%M'/fVX*l'HK99Bb#&>Nh4d#bE8Hd@q9`22@sD1("<CBaFGF!#?:3I&.6,'
%.Xi=[Ve'9=a)Ak8"c0krVRqj32[#R,HkoNC:'+#I9$dRSYe,FE(qgYnB!Tsk\>!S0>6-WSEMBS;>Ql[GK6F'MTs,JBZbFG'pFL$!
%K^%tV';I'-Cd5?DSX9Bqnlo0\*,YI=RKD*c679e"`4._hAk/%4`jN+LC0EBFHr+ooJqbG`KC1"H1i<;Y&G3SuaGA5*SJ.bKG#g=T
%>=aik\YPW--YlhA.m_9n!7QW*&r]:C!]".4K:,ZSDaUIpeTDP?%D.7Hi9Ed$*`mmU>;L%4L)F]=A:^1?DZN6I2#mj5Kma+]`/'uD
%=YUnG@5th5bR."7!&C`XMhNmU'@gQc<HZqaJiR8<S[CajB7eEB$%TO@A,;9p653(1Aro;"p*5$Q7jCidP2D%JGDs7#3>%Ubr_/dr
%1.dVn\ua(Ki2:@i&l^Z<lagX8*H!o="9cm(E*0#/:f(T1-d(7Zi0q4OD)eZudC1G0PT=HDr!+SodTm-A`sn^CJmij())6GMEO&Eh
%9`-=p=TL@L"4HK>pg_aZi!,k/lHj)#:-lL<3*EIX5d#6tBg*q+=^f3U%`7X#O?BZVPn<T"PK8R-4%#2Xfoa]nKf5jTZj&jVXJ9L@
%bXt55\EgJ!!_KI%THPh<mQssoZ'e$]7[0,?(!7`Cb!:Z6Hj`o0"Hl`?"SGcNe=Ed0in-rh`Z$sG4tEAA/D:PjWZg,=eH+i*Q[l[4
%AmO4,2NhMM_(l;+Ann+HA>in>e=.:7!LN=M")CHXFN;'aVYNl)aL`217qPp)%!`F97Ys:VWg08eH&#)b#>W(rpG4Dh\gh`R<H1^W
%U?/C'Q9bOZ=MhYM,Kp1+]&\g.+2m`XJ^"BsAiXDS&k=hK1WZ:J;3hV&0@8W]%<i1YkDs^b#HkTeK4%>k#iqrFnc24c/N3&s>cJQf
%X(<;j@\BD$5D\/)91(&$/G#bDGW^l.T3A1TE8e\eACuo6T*ek3,4@,%"C53]AWVmI`7)2GW1b+<F^308r%qCe%4q`'4!Y6I@@]]A
%$"N(Z1GIpV9+_GO&PNdJ)s149goMGK]Oi&8<DPYM[fa4hV<N/>L#s60]uNs.@]BchJ2KQmY)<:=)$XE/Mls(ZOf?r+2/@`1&Y46$
%lC^;9WRjgG\W3[_;\,PbX<S*-OsS@6n]rouC"a/0S'aetR&TBAUgn$eHO0VHCBjP8L1Nh%*MJL18op$&JrV[a3Cer@`[mX#jG<;!
%Ua_Arl&SU8d*Kh/MS<U]Oj@@nOmo&S&X[j/QFA@dG_@48==!_?,iPD-pq.lQ!_X7l!E+HcoRgj[HiR]ns4I]C+M'%YO)A_mpD+UD
%N_/r5$3md;33r7T7?'iB0XIQh>b(sU#_Z>=@=Q,h"u/I+=A%p\S?#a1#VH^,@2"NMX-T1(5U5d,i2S=6.`d;%OQ(8fXGQ)&&(PeG
%?`pAc[_pp-bqXca!+m.["[G1$(6.""b0M5p'_J6A;jtq:6q/GD/(bNuAoe[H7kcNG&]o*I_`=r8TtKk:E*;1>2CqLf<!84/qQM!U
%_%3@KP0k=kLh'02PGQ2mrQ4hW0o_7D*/0TJKn!&V2e]*5e5\fFP4H"[<jO%@^C%6&$Ya[X5hdC^/.4:q@KG.)@QL9]YrOX=pb0bC
%pdiZW==$O.id<*e&3hFJAU93n<n2A%DA8Y$:NB=$/-`7l$dXl#N$JUXTLt5/TW5U>M[[sA\@1&i*62Gna86mh45jlcm-8?>h+;aK
%XK!.kTnrt#CL4g'2KYE!YY=[+E!q3`_DNb<C8"4lP8;O[TL#@+5V6FN%1r"&9(BWO>;:`L$d?jQd2:Wh_62+!N^HZC=G+%j0dU5e
%\@Tu.7b.=a':(o7Kh4V$!NNGKf3gdBNHYG_gZjCU=MIp0aaeMd:"'3u&G&ko$WEhl6r7GErP]?u9WTbKB)+!B//jm$0L*pgZs<<'
%d%"*4&9NTZ$D5OP6WgZc2eW`[MaJU@g0=jHL<4V7!cEQ]VCFi&&Sd15(:4TMD#j\E'-e>$LU/j#Lbp*BZ(WQe2?[C8@*[2g%?BA6
%ZoOjlM,pPl=)i'(:^9-T#_Imb]FH]='BgJ&IpRN]K9B)KJK'uk]Z4N$T(auc!f^su\INO]0&rg<bhhu3F&?0l]Q?i,^;[Y0/Gp9j
%QXG?e4@,(*3!/0Qj9TlZo!Vt3&6Ng`#]4((8:\qB#iGh($rTO$+0fh$g-DTjg>4"V("bUYTl-l(`XogbbYOH*$<G!7"8b)39k47$
%3DnppJQjF_8fCufI8!!E$`2L_<JNl;XpZ+7=k,r.1=&d=I+^Eo3Y3EdQT:"4\tNqE2XQ6LNJ"ASJqT*9)S9iGK#(@n+?DimLc$L0
%"o8I]^tBmc&&2*JBSbLqjsTqXL*^ff<O&6lJchd77o^N41a<o@.`Dp;ZY/&Ei&[V@.b`<M?VXSL'^8$j)A<AhZAmbQ"9SDJD#r(l
%:q"I`B:bdM7$*KbckR=8!diD8behl_WYcM;PiddF?m#c??*`6_oB6647.(er':0FO68gA2MpKY)#)2&C@)Q6[@hW"<.]FRB5RS.D
%W<T'#).[OL_B[R<2:2taZ:U&s`<Vg.YJs7n/AMN*;"-oCI0ha%@;"M:`LPo@<\4BP@V0%WK*gb&lRrX(di:pMW2@_pP$OSCmhPF-
%1Jphs)kGY=fnOQ)?H>$`Dkl/DZ5T-/6n74$eq0n0l?0uZ,)2$2Db,Yb-p#(U43S@9@i!`F0S4l(mYeO=#]/^`PeIkfAqK/DbR@\Y
%X;!qEQrYoDC>,C*7H+kk>pE8^2%Qj@"F@8#3s*;O__Go].`HQ6;Q2C8!fWr/9nsYP*5J9X5U4;^D*"pjP>Jb']6$jU#b<8P)]FkW
%7r!u'2&O.uEVF$K2['olf;YI*0h4[QN&:T>aTtd5D?f>>?5F*_3'&:_)OgG%_l.5M]iWER;!88>H&`LWr$0]F'nNVdA&)2N&K+(?
%2di^P=6$'m$;8#4`[*uh7jot6:rSR%Nf/kgQtokf!Z>"PC`Bgu7a.VFa;?VcF\'G9.#%Bao.^dog[Wb*a::P$@0huW7\REsEj'jL
%10'H)V260M+s606$m",b(*h)lLdQ+$:`Z!<K9::qrL:5K,T<;rTEYr7bElu`QRRPp-h&nm9M5oWg(F^)3kC1/Z\\E4g!$7oL]]i$
%aYp$KMEnG&L5MriKWo;$#XrCdUg>c'@J,08ccabAICg0$$'#HTVQ[d75<&t*#h1\)F^p4L%RpIr$q7OED6bnh5c--*+boI[35V$q
%19K:n3M_jUqGmk<WXY1<"K@D1<"9e5'sX(CH4WT5LpH94,4gj*g(MK?npO&/'fr39a2n\^+d7k$(nZg&BcjW@.gHauGZ_ThR:NM2
%@d/fY.eYQT&#"PLEauU'A43RGGm0)nn-Ha$-(.jfR^<8XZulF1@TCl@A<DH-KWYcRG3#G"<+G"ue&,JmJ1O?DL?Q<SI_n@Q7b.b@
%7*!YKL'ks'IWBNc4-dVG<d`[:hhcoV82!tFZn7hDPi*nrH]mSH"/)@G#s+iI(mh<Q+_)5B@%Jc5?^pD-U?\DB8VJJ7)4mO76Rtd6
%`Mp/\q\;T,B`EjB)JS\#\Q?NTl'sY?"R2@C^I'n;mK/Ed9A<H_OjF0hkO:B?dr+PV_9!:+6R(f4q<k1!Lpk:FNg,p6L_3<deV?gL
%kf'u`_U^<)G27?`d?!:T'aqVd1$pYkLIZ$2Z`AsCUk<G*J_hmm:Q-N3+p\^6)/E$4"EloS9N0@*F>/_?H&M`DBSW;#VMasH57IUH
%6F4`M796XnN,]M2F=2<"Md1?o`fuQ>f])iS!M2g3QSB1RMp+qTS!ZO9^ngJ0\>7'K&-`^*m"c;ZNMB;VoNit27ifN>LKYLM1[5fS
%F2SLsZJ]_C$p65OX_<q1%r]6s&fFcZmVo[>a8B=+4EWUs(kJ+h7$01uBQ;*g1ORpbK<aE28cf?0"*lE$ZbZk0fU%CclDj<t?pkUU
%/r46g=;q`S_0"[i@`4Gk$7!U<6k"[q4;H3Ma>)09A)8[^Mrp.3.Tjn=9q0k%GSl@@($'rgR+4dRk[4cV1R-&q,7=,QE=B10JE<ek
%Wgi^$9;Hn[OH[FW%f2M(<#_-r:,s;uBt+A)Q=A<\LjK1Fk:=-EWE+9+^^LIm,%;\1&j1t;L?iOEE+%9dPnl(/L<c/ugQrO?o@L*u
%-WVkk1>_JEftj%%9SS_!EZMNn:4Z3RSR[QMTqf:m<h55<pa2VfJ.*9p.jD7,l(;(0d'J&;MccjDm9$i!NAj=`fV9TAhdi,C27r4m
%M\B)&f!$jk6%EqB\=r&ghVg)j)IlUH_V2CW0r)k56%in?c@_gK,m:.rL@EjnHSd3!BP<.19G/tZ=MIpr363VO=d=sm7lPg$@MjhR
%"(A3`/<K$?EfL52MCBbcAVZqtU`5''%&2Qa2;2`Wq!#;]7X/,qJj;O=ZF]0Ck].p\m5AsWVja7^<3a,7ke*/4ld_`3>l)r+^5Git
%Jfg)P1J9RP`/5>NgiU7ZcB8ib]O\.9\,dlCUK=CsY:ru>&iZW(9V(+>-I,unCPhdt3NFP(>GPt-SB7TdDU:r'd%(/TJc`nF5+Xhc
%(pc[ng#?.T1isI@Q<],<EJ4/.2Q04f<\UfX-6,!sb7<NO1!./rR3QA^p+*p<d"p]d\tPer/<#mI7PZEQN<#=:c7h?*5g=3,M?,jC
%`WPAfQtU"1N;RB'/91nG69Lo/'A55<%g]CFZ>hVX9goj)%p[KU1!r6PDhnmd>l<ERa:2]J3&D1Q3('=n_:t`h&":#?CWq#1APa!B
%C/X!$%U0U,7&Q;`g1-of'di?IjGNd6%*?jb"okX9`#I3=]Rcd0VP$uuo[u86)ZVEGk<Tl<(coKt^Y"c8UkMjZPWltu1``J-32sb=
%`@89=C]Wn=>SkUs_uh,U`^'T%KuZC^c7e%K&>;Ua=UcTA-<^Pf17W^^WD&8QK5h8!13Q\P:D,#lR#44_!J2%b$hCQ=`U?CYdggo%
%Kr8\\Xia-@G`[l`_)NALBYfX]k9+G))\/L2i^Dg@+)^=t`\@nG$:@r,!,)_,:@p'h3`QeB'9Bg!%0$fS5W.$<>4<+F?/q&;Kqq)f
%n?`1p`4L2s^JR`98iYM63&YLgP]'998UOC`Oa?(B7cI-)N>HFOh"FJ$h6+Phph++cC`(=1Fb-69P7l:P=r2;4&edrQ!l63.cP;5P
%32sbF`<CX.21^es*5sT[)Z:G?jgZee.HO3VG]'T,jfV#s@IP07li56r>$Lt/K,"`VmAQOu(BEqU*O,5>]=:8u/-EW&UBq0<`C*W/
%[S]Wt&lM:*A5#\;H70T]SZmoZM?6gF9Uiun9qkC?Wi_Xp9@/)Ar>="V8SWEN(Cr%^\Ftb0W0do2;KFNe9H2t8*EJR_V4+3*Y>G%S
%1e01Re\s2bA%"R6!bgYY;6k2-1C1')>70HI,3R\hP=H'*:n#7pnP[$+.l@]6ZnXR:S>6&D'`gT7G]iuGD_RDD,)_8T;Bd006!f_7
%#dWt\gte5>X'rBfTi3T=dM=jQrd?Rb#r+m:1[K.0"W$K8O\CS':bVnANQ"Kg_u3lC`V&Nt%FfG;Dj;[+/813g"?mIVC/IG$Qgk&K
%+."8$kpO#UGTRnR14n$9iQeTnaRlM7G$E"-fd`Y6%$5%Oim]\%#W3t83W>&iaGP\l_D!;.&I,]rh"pe")R"uIeB$\b.d55:0QKbc
%a$OW6G":UD]]VT8[-3qYplu\c4sF2ui)cUhOaDgIq?A4+m/pfs?)\aS9YD[;:P3V7]"0DL6\uco?0-Kte;sc:W(T1l%FQ><0tHKl
%_8>C!5ch`$?7ip\.BVp+I=V1:d6tqr49285qforrik/NTpJDK%VerYk2dN_l_ad3^S1BJ)%<ZlkFR&l!W>ciCB[V]oM$GJUi&LdH
%Y`<[:4+(e!0MIS4$%4iW0.$76V77Fgb0+Jo%PC68W8%O47(#]10,*s&<\Ql)E.#dC+rt@7+GM45-AK.E>$NMA80c&d`M7A:-ZXa:
%@Z.q9:ds(V)WY@G0ZX=EM#])I;G-0@8s)PPND:Yu0nY[nnOf29Z;UdNP)gE$lB8=?,6oQ-f&:%"@VBf_Cq.)me*n't2;(ZGFdn%'
%1LEuZaKa)O_MWepJeNbSE1#@:#,?[[*rQ)OH!3i(mtsIVZ'--BMkY$$a8"&,9J/Wq`XB%r0G":>G7%N/?\t!9$5l@B6"_O%3*8K;
%.-n\ST](LWOo1K`RD*+]#f-C$(d.Rc@)uhtfC/kZ)+K>c[jAgD?!"U-iP*-B+"FmT9erhm4r_KN"D]^q!0(9\n1-VI;'!r66tZV2
%,!<f!I>Q7>l">X4cbd*jK-_[`8,t[b'LRU^$,$$`cqlhX2CRAi%;?^m5a7_<jV?Jd]SD6Lk&@*EaC^(\*3Y-P!&18N-3#3s0Gl#k
%rG82LZ^"pUJI@dRV%E\aaq^7,6D[@)!.MtgT6T`6N?=9O/F]^%bs9>C#ihXQ\t<6#Mi4T&6sV7^IPo'&"]Q_O@8YfX%f.r:U;DYa
%KKg_ML9KT7Vf!rRH,4J.JQ;chA5`mFka2OWPOFH9K4h%0XY)C4i72*TVAXqP'7T0J_qnhR<O"Gn*/Vh'goZLne!+6(hR!<aihEai
%1c1?P&o\tH82u>hT9QR\JD=QYnrjF=?*=$s5rmZ_SfjaSRr]_aHikD##./2)UK9"!Sc/Ud++SS0nU(gFMo/SUadE3=:BABUO?O)'
%3cD*.=(qG<npW9c&&@W8[!\N7O6A#f@DumDePs%t75eag9nYc*p]SR3A!df:FG^+Q==q]Da9N8B,+V2<"nnO=iPi%!!#!G?"LL.p
%;<eM;E`G]>HiSR2TG=g@:_.jjVJlSAjU/kk3ir]B`klTN3tc<`)jlKipd!ZMLpUXONDci9@A2;2#,PmB_0P$<!L@)>`Zfc%r?mPC
%PBCM"*6lP'.EK.gFl6YuKNJK[Y%>hr5q=ko)JH1]U*GU)KDi\H*,%GcEJ\<ZRYZD(AgT$AnFHdo[^Zs.h/csb+EEhaBr(N]\?B<n
%)OJ&Z`4.FP!#"i`g)K6Ffs"BtNA_R!,82/b&^cT^5RWUPEO^D-V#$?&^r`Fbe&59>'7t@JCl.sOTY_ng;\ZSGVNH1VeK3!o%]FD9
%4d6>m%$Luh"C-tt&-7fkAjR+$M2\_!%ru$t,\'IqArZ7j"[GFDeV(J6#1[iR!5aLP8>>4UI'TZ=CgnTM_YIX_ZSeaMl2";Uqt2I^
%bV>9Vc3FpTFhU0X[_d)'3lI_`YkS]7K#7?f1a",=+SYCq)CE*0C>o<.DYk/ZO9!MPe1o@>B%JCc`em"%IG:UF)CZ^L0*)GXa.$\.
%%N/.MJnBr$P)pJ.I4E:86C-TP%h"rS<ffMtSlKLH$NTE3OVnu9Bc>A@URl/tiG?+ULDO5bB>oL460Da2)@HPqTeQ`M)D476AL8O>
%L^eisnWZ2\`Jm.'d_1hEW8fHF_[t*O`l)uRjk<+gaZ"m0o6<r^4p71Y!3;G2:+@>Si^"6EPbP3"aAY3>7+=OK"FtYf2rlaq%E7Bf
%/GFff9+%7CE#;Zo].80XR&p)p1X:_0'Q@,Q7A+R^h</fmdZDCU7f5R/)jgaZUu(bPp@pm@Se$8ZN7l#m&;aA(#L"lmG?\M[m9g-Q
%@Vq\#`fjZ5f>M69k,QGE+2hMA/:Bd;"b:56BGJ`8p4V$1_o]n!EEYm7KN)>eanILkfcg9!3toc':Lf=sIu=%[moSN>Th\Tq*&e"p
%`G74"*=bmi#Bb'EnN\/!FQD,,VpnNG.LLs\FA1GcqId>83=`'5Mm"t?(`8^lrJf)4!@7IJ]?+J3]RO>K+Td?8<JSeEQeLAJ=>`+b
%djC#HL!T!Vlm,CmRj^P@kDGaP&s5P_pk.?l>>='%`=OaG(ufFA?3j`'!JqTS!t$h/?j6T?LZ>fdcd;5]aKu1W*5(EE_5&Ono>U1:
%H](Z'__uarhsn>+g#\oP,E6<)/GLV.D!W?P_Uuh#ri4tQNtlt<^iW)@43!'j]T7aij2MnS#uj.]Nqm,CQlpM5.5%.Kh>`R@=ZWJ+
%KUl7jHPR=YqiMZ.mdhIf5bc%s3i-`R8Yh2Ok5ZX:U]CmBOi%]<5FC);ip')j0e^hQQp]Yf!&;S\G=Yh\b:leF@IE!5>[V0p+Dm(j
%Q$?jK/JgJ?`n3E0gQ3PrAQH*#bbB2K/JIhgBnCJaiZ=b)TnR$e4r2$,f<TY[3DSauESLm;[UL[8LFlaE/R?kH\d@AkKF*n\`rX^[
%D]49XQ8h/7\L'(I6_M9c<eSim/EEP+On19n-fgJE3[.k'<$Vap8El:+E*,_fKfS/.pl93J&S(b/Yh0.r6Q.OUh7B&3ZXWR<*[Ra>
%S%d"i'<>l\\Yc=>:JFDT#h2Pnh]:[%`AsPI4#+sC#omPD@M$>q%53YWWoeYY^<WLO(eQ$TFu2GQKH68Dn[OaP7omYID0/ba,)9et
%THX7/TIUZhfgiPGIT#V\ec7%%.9\Ph'u17'j[Obk$;a/7rKsdS:Qg56:OGLg[#Scj^puFKA!7ID,CLq49UA;LcoL&?+;28`Ecs04
%r5&dX2DL]f_"%tPi,q[f)++(Xl@L.Vr*4jdrbn>"$*uFHGTq:J$qPJ0IDc,!>,q%C$QF^JQAA(ZP4)r9HncJ'\mo,U+,a(Um9rD9
%&n+*t"Pj'6pO=ol&p/gH^PNFrOo^%I$NQ/-b8FIa!>+`DPLao1q[N>QWpXJ.^-b(U![:kU8VrWmQ7F-MiX?m"#MH6LSR!sY9RnEE
%NC+npHb>LRkJbEl5g7SnMNEqg!.m:MqgOiG34ppHHS<Ja9430qH4ho-+u%;qKXa9t)=Fbqi*S_O*a\'iM5XrX*qYo#E/lB<=lQn1
%bsBebBU'^GJJGt>pTcP_7qelaQ'^Q$?,7Er2YWXP=C;i_%EDoS17ofm&Y=ZO`2F]sP)s['jpo^'`3o4Hd>6m'g8f4_2K&>N=95\]
%_g@_24H1CM@GE#Pe>AoFP=n[4UWAf\6%\!TnE(-/-AEBE8?K$U*581e!E)S,huFBf/&?2a'l8S.O-i"-)%fdQ0gcI>1IOVY+:9)'
%K>L!nA<+(h0?r%g8ZU1f&?'VP#/F<q.7!&0?e'Ngl;0grI/F_nH>6iV!!_9,U3FE#%KW7l)SjFgf5X3n+115\=ZuRGa@?XZ=]=Jc
%T`BSt##IV)ao(P_;k,pD5/2uFm?G+(AZ)dJY;,F/&^OLj*eDBpo7:So>BFbcMRr4h`EPeYIU3d0-HV4*bZi0WfT_>_[r?BJo0:HT
%d=2)V`Hd9SaE&(T2%JATTE+qc1TJ_gNgHSueA0"4*_RL<OF=9GFCIanOb)rI.8g/.dM2g+)<drgiND[7c([7FlDUH^>GMJ]+XUQk
%7N+sZ6^$=1PKm*mF;Po4J[gr''rFgiic5o$RCrIc)J=CqS@?S[E;od^\KVdOGF<rh_0-;ZQmMjpM%DAHooUrn8)rrT'b/IIdiJJ4
%0/>D90LTP-BpQdFK.JgrE])'rhmcF9g"YQi9tHC;5*s:W'qTE%Erld+MVR(LZO+!02%b[%kTj0eGK\Wr-e8D3R5I/>X\]H_:9Z*u
%6XL=:oYb5_eIS[Te"p:JM(IOOZG^=_dYNOfq"uLqa@J=SKl'p5j+kZVYWu[q(7>;f6R+<?/=u&3J/a'@<-8/#-#-ut,#K*UaUumV
%iu/[8,!Wl?`1Wf63<+q0SsM\NjN3<Sms#u]A0ij(0fJsLoeF\H-D*=s2-Ft@1p2Ij#KjW\#hR=#9])k.*?V!2aIf5qBUb5=^h7k%
%iN&CUOj$NAL.8/!)'`gFdOUDm\C.e!Ua$;bN.#+gOYiauJHc_K0^r8Z!%&_k`[)`S,\'7lPdm)W`fE3b@Z_)j>b&Mt%<::pQd,1K
%Mgh2P+*n10*^nf2n.-0WZQl8SGS9$M4\ct`To$nA0IK>nP;0HbY5S`nKZ@*&A:sf[b#%YGEj:A[B3K&t/DX[HI#"&UFiq88lNap(
%RX>X;$9JAU\qTQM-GIcjV6TSMAlZ$B,qfu`HKXO%3iF#!Up@J+@A%+dDs;Bc/D>ZCRfoEIF9Uim%e>7>YGP,2-hu!HZmC74SE#[^
%VR_/P&&E$tBKf<o@ipMn_C5OY?(hs*&=$28q>OS(Up@rd<H5nj1O>i53'gUZ)(P`ed%(l91XUed6&DG2.iAtY(]nPToD%aJ9j,31
%.!u`WkX-hAWC5^g"$R97br\lh;8KabQ5G,_9j=iiWp@KV%.lQ>=2+eB<kb>A>=+-1NHsbURW*n?DetBEn-ohjO$iF%2s(_T7-.'?
%TnrLU5QgVQOOF5hmR=1N,MU]oJA;3#P$h7J!RJmP,r;VX7u8-dCkOP6+o%VO-YQp=bWRcDN[-kD=od#3pB*cPH=U0s<_l.ZTtcP%
%a+6c4$j<Z/j"l(c#K*Ago^\%MI)%=&0rPt8r-Bc^!JI;54^bggCQb84#gc?POK'Wno),0]$8b?]W0MtT?S7OA&WUE>r9snn+^%aq
%A0C7di!<eC">!hi@51R\D0aoHYp^:l'>!d&8<0Dk5&<L0YGtPa>dS/J8<\hs/_SSRMYL;)bHrE1.M_=^pRch<nfn]>,UGXW:Whee
%3lD8=7Y"P/c4ha78sW@(*?7PCZ5+:;5aeJFmVsdJ9hkO8_pukrL<GkRVS]b!"2jdu&GRAQ<^*<GQP^Ge>SdCF]V.o`j`I_..#8EA
%Y_kk9L8RuN91cXIlfo:O8:6rkOpVH79K<Io`Df4[\3u.128$.#)81\9JP]@%$@aISFDFgu86oYi!Z$TK/`Ol]/`Clp`>GbWO9ZIc
%U>6(;$$!mE"&qT.\PKVUiq"m>k2Ja5c+6P9I=gfVb`$<N#')`h@!3)jA!+?1"slf"d1IMCK@H0JR5i(Z;60KD-!IB;b]!Y#M'O!t
%N6ndmODbdoG_Kg"V8I5s1C??B"A5<</ldiqg4aZs9>qKVE_3,.=;la;,"D)dI4;d)9aZTSl,rA!fMRY#RlFLo>4F3_/]g[%eh1#8
%&s%V=5jSNpQ<<9<AkN(#E\eFHP9sRj\%/lK1f!&gM.e5nhUUu1ET'^3+H`LW1Gqf"J!6p\M%YUNc]U1Vq8UO*FP&r92""W[/m04D
%oX@/g`iV9s:oII7K8'A0MEnGJSB@b<;@fWQ/lkU2\!5n%1qf?NVp$.SfHnJ@baD$l[>]>S1,@i43E!W6cjPpKO13cQ..8-A)O$Lf
%o%@RG6E&,qY_QcQV9f;d;KpZ"T&TW.<2Cmm?3lf.$%#3t?4&j>Q);&p"MG1:Y1,fooMXn`3nTOS22!"tHRRHAk7U``,jZZlH5Z?-
%ZsZ5aDd"'GFHUUhT\Mld4YW\-o5g<8hOZ(UksJ)UBOo3f4X<Ck*e$%&Yj8918M*7;<[G-G@:DQ:7"U%4P+dAc(q)OHB8@CPE6;(<
%+_!cO7%f,QP+dAEB(0(?br(63_18+l$jhanN@`qZLLfTj,fUO:=F_E'EQsb\"DU"a"t8&OkN=]l5lD`rM>`a[PoERT_Zfc.b</NQ
%=U^WI(P.]_SS([FMTInRJf<X>^f$t`AE\a6T?C)q@(5)/CDc7jL,KSL.cDuPO:8hP%S?I[jMt\k<0:9,6OgI;8mG`ZUpn?56'WQ;
%.&#N_,Cr`uLs%u7*`M"A@<7.NXr@tOc^@7sZ>V#^gINKBQQubo;0iWt64DSHQ@BGW&/.BA@_s0s@cI@c!Fk$q]K'f-"iQ'jR@(Li
%D^>&Rqh[ns>+<EQSPP1IQ&&#aL)Z!JVBP*RT9kBb#>ufa-tS@VVU\5mi.doQ<5fSD,>g`a&oea]Z[<>aCOWGT?:Q#Xg$)72hBTJ2
%Ge^"RqQE@f7U<R_\mJRkX!n94&.j\AE5PTC`UN?UKAh,a\3*SgLp=OF8P][bR4hJCb7rQ=2>Bn,'tPg[E5[W?&2Wh"(85jIW$F_b
%ajtqq8qsqT?j+0(8&^Ap?0A[pn;/(CI0cjg[oeB:YDNPoD3OR8_qm_9(c@@]U4]MW%+Rd4=Be`<>gY8T^uBHJHE<KOLZk*f?oZX\
%LXZl%F_:-J,0G34&0:qB%Zb(T$U"NT5aYBc&7%Qb7Sa$$:[pGjb.PXWGrkE9+V60*@^633_Dgpl5uA@sHA.NR*=+pO.XJi>O$<[o
%5,Y,a]pGD$&E44XH2[gUTB\0kSLOX!/HE@lJWG=Yc/qh8&qhJ__PE'!C)$KQ'SYC:,Rk1,kVN9?Z&:Zd&3mCtd5)ub-`kYPE(3e4
%NA*tVik77s$,KiG/!rCoY9ci3nj1>G%(G0l[;nWo?QtiK$UGr>67>H\@IP_D$oRP9<U:<)]$X'uF=o16YN_KTGKA;/jX%c5&[s<5
%;rIe]oMRNZLP+d6/4-4Y/Kt0p=SfPAK@J9+8%T'qQ7+o&7K"G6CF55&@_$[+%7;NY"%(\9Zl/pQRN(1F0<3u0iIi-*7_hkU/_(*S
%>HJ0.":6QlcDUb7'7"Cb/(O9i:DGL(8PfeqN8U0k*9SZG?nk,u>DQT:jAqY0K&<"$?``<01$M,ZdA[%#NCt'Y28f,jie*?H.+B!^
%PpIhPOXkMVP0,:Y!-&i2&SQ@Pp6(0?;Z6`L8C%j)\k"+m0gM>idmg'*'rhG&6*u=ZL^JA6l3tL/I*i\>MQ4_UhN6bIE0\l:%$`[V
%jo$BGVTZrc!,?S3De)(4=!eKD"3*p<ka;bZ=^iu@A5WH[!(u_Ig%l85-CR6[Ki*/I&!)tYPQ\h^$9Rg_Q7-Rp+K!_1`FUY))H>?&
%bU'R@LboptG`p4OY[SF1a%T6HVK^_t+sr3sXrmi("C]$FilQM"Wki5ue;RB35tE'W>K#a]A9d!g!e]kh^5""QFpYci_VQ0fAFh$)
%jL@[=*t>L67;koKm/buGFACN?'mq?nC/6A>NXbYrMP@kss55_"@I'Z[6G.07M(>:)?H5*u(Tk%_Qo+G%[S$*#.`TG?Djh7d<`d44
%L8b![-j<3aQd:q][fAi34]_@@ip5%E![nS\iG5Q=-39HjfG"e6FQm`Q-3b,/Bi>.KEQAU:n0!U39\U^p?fQ"NG/VBAThU+C""RUi
%=2JjBLnQCocs,LH8:2C2-6+4;?Q>ETAN'I:;s6u4)X&sV7'UTsml!DD,a0Q?;;,hL.*=,imR-*02-S?5aB[9&ai$bIJ)#SE+`]:e
%L*TYn*1aQh2:<cG%#cEP2=lQt@s1FchGDO];O85=Et(!p2?A]`k3.t##sS*Wo$A:V#"l\nW[:K<:4`ZP#HSH`MpX7)Q%J/^bQZ4Q
%VTEIZ*1JII3L<J#kfc%hUS!iRaEe6_cULH88<bm^G5R,XV2p&'1^(LgmR3sNi,WE#-IESq_gqp0LZl_@(m7K<3BD"@B;C*,p;M#[
%g15;1::,s&a]CV><C.>%9@0e1aWp=A6W7@rO'0R]$E-(obqGtB?un3B-.=2,rF%#Jn<&W-&YUeL3$MZAC]$ID#0*kZ;]rJj\]@&m
%$K^$Dnh;C<PKNY+:_ZP;FLnL]fa7aZ)FIO"SV%&UY%SD8L^Tp8^k$lekf)a&RKGis7(u"M84*ap`f[7=bg5Uu7\[KiE[$[&R`RQX
%#po@Vjn>JJ,fJFiqh1pU^7i\ND%+!!h;nHg<%=#\oMR`Uh4dL[R\J15*1Rs:j#9)>o+2Eo.`_g1LNs<.7Kn!A%S4ss%D#2jl];K\
%WuqG'CRT_JE68k"./NL6bYd>_5a;jE;<.2#0>(+i4+=/R7tb>*bj=?dM)*.A-W-^Yks7oA=o>9gjY*UW]Lm*_A'H8%\U4G[GUa2U
%-j2s]__:#LM#2%VO97,C_<'0h4pa!LP__[L11hDW8$mkK^>FN-Mb:@Fih@@2ZlL11QXG5:AeVmt$&d37;fDOe<T@]`1_YFVK*po(
%]beXs&9KR_DAZWIG=BJ0&04WgdGW&j$0Z-F4Ic\WXGW]rc*=dIUcA*8]c[m6K/>mp=sb%eVWV.hA?-2A5G`!W)._J&moZ1N'T+CT
%j)`$@+)bQ_"CrlNLU[Fp;b]45*S+K7O8qQqhP&EqRA-7p'`rB&&gkIt%uYidS7A;aR_kLWI.n1<2Ej?!T^Y&SZ_788D+.,W>sb2m
%<S]ms:oUImYF8%=0sA:-'kZ[?++WA2S5]Ys'2SP)<%J=@J"i]4+^/,"o['D$DjMr#inYj813riF_j;m@`W?*qE\/,*>/AYk#8=9k
%>U,TYEbc#I[cFL--G?L^.1U"$)(Hb:g>Y;d?kjG[i1cSEV5b_=?A.Tui"\$![BZ6UK9*<A4KNC'%bK5"_b6pI9R^RaCFY]>0K(fY
%8=bW8R.TOM68*$*RCGS`9Z])DW"j/U'c>2K@JRKf,O/T6#);F6<FC8B5fN&jVTIAZq6:ePn%djR'%^3qAh./M0rShJXsCS46*Hg,
%)[\M#hukel2380M>4?F7DO=<&?Bq*0[JBb)H9$&#P4B#K/3\Ga6k`(FYUc)-qkuCp8SL0=fH#d681sRNL=;u*Wf3W\(,<NpKN2Pg
%QSf&_Wi/A+[D_0V0s8%d"0+gf/Zosa7CNh;i"J8LV"f*B.]K(_XW_Rn1XtB,Wirnqb%Y+qjdAt5Wj!`aQ-/9T(bKq+=V?$]Ma:H/
%(*S,n>+e4OW.LaPU`;4;:;IN<b9BKpkhg`)a?`[&/?V<^<umn?H5%8cm"[!9A.+!+?od&>2?[lQJn+BEC59)10o"uYU4U!,JrBu3
%9,n5spHDU#i+J29;DccnPsTa86/`L+9BG.%R[dj^WYu%BF'TPd3mYT[/Os'X#,S(6@L1<_r5JjU=2YDHD1sJS\7.**:EWWH/;9H9
%;Z+*uV,](d"F!%W4TQ:R&1K/5k?8?sA[/c3)F85mkc'dYf+1@_/lo,mjGK.7f+,OU#G(*'-9^dK%j8HR8`k'L<7j3"N1I'YNpID.
%&LIbS8IOa[2kH.6"Gs87A\BNVjVhU<):43@K)"=fm19!E(4u<:U-n4iniu4@V@i+Om<Jd'AQAr]M[^Tm.jR4KTH*8%<6Fj),oKI"
%nJFQ\(^(q);-a6C5TN/!GRfA!N[DIdQ%0uU2>mooQruj#eio,(,qQd<fp9LLGkCd?k(j(0#VqJIf=1!$I+F'kM':6C9GFi=24N@"
%'VK(P;%k).n&mRos&4oc)Vdf]n,e1i9TB\::)Up080c3l]?fJ8T*V!U9d&:p&]Ck+\Qfo-5bp3S[o@L62KVY,_pX)Xn+#$bJm?:u
%+.H)Y:W9mFW,(Uk*FF,7n0nT8AWUC.><m2Hb0q(KM\mJTl;7h\isPqA3_lb/:75(gW,VJG?ZHG\K";_IW`b::Ku^A8K5A9B0.s&X
%Dn1)s6G_)OW?G>$5nN.M&4kUO`tbBHT,JIoG^@LPQ\t2IX$Mi%O*q[t?61DS@g"3L3YPuo%9NZ<5s]@IMGZn8:)+XiRfC/c6.s.p
%-l0r:=6.bkq*lLW'FEEHAI$^g]XfiV%eKQ'7.1na$)Z@,;o4&2h`qRj%A<tEdgRFSLEJ','`ijdWPuVp$r\unM0B\Sb;.!Rn#@m5
%Lbf^";#"/>X,F%IADn3rfSToqXdd/9-G;NnGu9I\1<uc,&?gu.n2*S&BLUh@`Ur_+,1Q8JOt8p$i@CK.+q)C*O7)h<_4)U8_Q#)A
%dnM.k["XNu*[QtAg*+Nq_W_dVMQ7&a9D>(0,S9D=">XX,!>$e9_uH#4YuWPk9QL?/BiYON.BI;i5oAJP2$/cR"p"e1R"D]4dA&L"
%?\gid+g,VV?\67n1/oV+)F/,.,Db3],cr7;(EXs1!ek(R[caB.:irCqBH85:U<7)N31WPNQ/rb<)SA?9Pg8#c@kpPO@p%M,f5@>;
%#C;34.^62Q&Oo[J%WfGFdMW0sD[c#/`<s$cSSKCA'8r>0mSu<[MeE;tKF3/oO&@H,'@[AtH%(lIiFG$Y#;gmq)$:aY3%*iujE]B$
%GGHLWN[B,uOs'mhB?;:]:q.jJ6qL4&6NY_9$rU@Ha0%sUgSDEBI$\^TgGZ81$Mul=`>/MUM;t=FoI`6fl1bI.JjXOS^/"#uD>MI8
%S-!&6/?CnNmr`>h;GC""LR_tZDeKNl:$#T/Yij*Hgi/m_2g`ri'\4e#keLB?=>Eh*Jo/ir3dh\_1i1pud]i.gYgKC/*("[+FcK'E
%OW2JYL'qJ\52^2Tqa+tqg/Oc:1k:G6$lZ=^1Vb33-W/99oi6dm;4@noLN45E4SIo'%::;9Yn&==Gf0\M+Nh9&*Jm\tW*G.\Z<?Vd
%9mErRCmVd85!_[`b1%EOpN2("_(X/lk`bKhCd,j7#\N1nJZp9^Pn4m-%&1^nD=MjUEnDu[hb/b,NX?TB_MSZ)a/"ds$5kX\63jsB
%[2o4%L!Ht[9#2cdU',m%;R*JoK^V?5%XSh;OVs9KPH]N,^\>"q"HSC?CtuEjE57W"[3V+,s&\qH]6<7;G4Pq7+#Krg""H\Aa`n6]
%j#19f!./)aEb$FjVof3cX,SZ3)ZBDj[FQ\8)8RQ^hK,O[*(a<pHj1[^qlt>-iR`K#Frlg;k@XHkg3LDU+1_@%nE&>NITq$Qi:i"f
%p&;#ko)(_Q$%=\<_n9Oa_o<%'aGj5bcdtZ*hMs)\W\<f+Prf?:X.$W#cL.aH43I*M_/hc53p0W>_!@MLh=It&d.Rt1bGj;^hE1Hs
%kI0U2.d+FAF$Eq`ZMT7nYCAE9n'LK.gUWJ#8'auBcnB$2k9T@8H!R,I,9$8eaH!LX&P;l*CJW$bMSae0\Kb@'7.@plhN@'+ErYf\
%E.(7K*uk/[8alK'H/s'S6_.jgkAg1Q("R`7>p"4Ff3d^/fR$;8?_*bNC$uYgJ*hEN`LY'@K3*6Z3So%gG@1(b2*aZ7d+9ahe.3Q?
%78K8t;0m=`,CLS):YF/na`LNA<u"M$&_,DLoi+R)"]S8pePU"NZsJ1JfE4!78(lHlb&rqm*>Mpg(YDY)G#XB**TU4%fhlF+'qZKM
%Bh+0:;7BkrZ<bFd?c1Vq"a:[#IEce&"as6IpGLZ1eTXeThG^4o'^d!LHs_B\;=n4t!BmJLa1TbV6M,(/*L"L^nBnS(]W:pNp4@RD
%g0bo,famBS4arO?PGPh3c:A0DV31C],;)!O$f80HE-5Fc#9)h(!u-#F+fFEtRLq**QjZYYdX;=DJ]FI&a2UgK`^*H)=0?4!(.AS@
%Hcc[l#/&,W*"q_K@p.,s8&4?\TnS.1S[l=SBCK3?g0YXQc@CSd1Bsugdq!3dO:A$*U.ff8K_uZQ&l<,^nRW<V@@;M@dEXhdUZTsE
%IUE7N^08K(GFT/2GfiB^bRhs<_Ck%)nTci,$c*-o5WItPhB7f9.lo34V"J\!Pi_M(GG1npfQ^4c*`m4cK0FCSldhWF+7Vqo=+,[n
%$6_&YBo<_^.Y^4lbaA#;&3D/s5l?q_3)HQ$U7kF:JOCa:AG?c^SkqNmNRDbAi?2]!^m\I&4&]Af]7,7pG3OpKGruh&\*5T[a8U<u
%-J'dm"GAk<8k#>eP##9$!RcZ!YnE;OX)Vu30;Y?NR07a?/XXRI#qAKC\E%@/ZB%n:C^#S>3,e"`+5eM$/%b2V6XQ8%U\/,Ps5*@'
%9YELLA#PftOagmUH#BW7*]&E/,9sL,V)d70KD_Nq0%5uNrccjjj=&;8cI)hc.O'G,Xb/iK]G\TB'/GOFeEt^dVXh7:L:I0L;jg=[
%MU:u4-C`02kkW'%4/ABKH-V"Q_S^&oFL;F.T_'*?V'&/SO<X6de/N#EUu_Up,8["Nb3C:16n6OcrRC5]fB*ZWPjOla*8X-nJC#2*
%n3V::E#Db)<&=%i4ET[t[-#E[![WaZ5XH>o6p.J#V$5%g[<XRG#<_+0&tQVG@8+hiYXln?Its?JP-`VH;9.)0N,(*(4[SSi9^1^h
%Hg)%&1XKfdoJkOf"o2:o.o#hgR:aX(CoSpP3Z\g7hfKX$ei"N"48&u0VsKEghh]>&rgS?r;4Vldgl29P+`3+W$"RY3e@W5GoJ43$
%"pod)fC;c[cW)He))<ZF:4Vf.//Pf\e&[;`=HP*K=`0:hV)M"SiEXp"oAk;u!Fiq_F&jF.mO1;(E0=#7R+!s_C'0^Po`&^"Fl7JC
%AYIkcS;i=KUOe.&)8j>%O9sM`MX4Bc3N-K%lHf[^0fIC_+:!`RCH],3\W%L+LU[J%7f[Dr6YEdpD4c5NC3LLU_IEGse"fYW313Ja
%(ua9f1%uCib)>Q.K%ATj,0k+@T"tE/I+'g>6)%N>!):]8CLpK[f(H7)D1jIaYTmp^E`2Vi]=)Nn@['$oGJleFdJg:i5?Vl+d',50
%Ukp)qgrAH."'5"BFTnJAaib4g,hdGD(#KZn$WEmJ8AR$2L2F9&6ai]<7Y\#'-lo9U(NFHO-)fl_?pP(A#PEcH*"SU[qKpM8.L/O1
%.'ag)!Y`4=H4A:<[a6oPgQlD@.V=\W6qC2g.c,D-Ed-gH+:Q;I.`Vm]';?qfPj>2'iZTWqnR\iKG=gT#&Vr%Fgi-PeFAm;$qr;;g
%mC_b@R'9tQ#RenWcZIsqB(/Kk/iBoP*4Nau!OL+T]ZnoiKp<t.QA><7muLD&4>@k4:l.[':.sP=*[+PRaUEU0dS;=e-L&-CbDcu`
%d7QPn_UC%"21;ItO"hNo]WX<3j2n-VdDlM-,Ct<H=rPcK8n%tmaJ;mO@-XC)`%WFXhVPC.O"hTCZDqVp_,AA'MEq[g0$TVs'gu>s
%nrVL?&Zj":K*m@PU:@AVrZPkUL.s+B0Z&+C[BX>aO@@am>p31Eq*C[u,cXdh60OSo<&-.5mG2OW(pbrTAV!50VKgKrC<YBkKKS\h
%L&uGeA@%D[qXt$)@^aD(ctfb5N60_0'+BgVRYm==9AlP%[S=2DJRs'<+2[rC?f!XWLn%4eVq+)L<8bkO/h0=[_V)`Q3KB7*(\:k9
%@BX^;!XankU#MT[CZRMR:r.NI'>nkBijB,)`A+4OnRUK/+L;HA*dX3Z_]7]5$RhWPkpFE7dHh3o2tnLB7LmQJa4#7?5c?,)#5F9N
%("4&s:Z)&-]m"@P0/G?Z+Rso`M1/cg:@rcY`nY3XHq%6uc>kr)aYF<&nf>B2P$LjqWWK;dR/H/R@#P]P>&<*&bhOcWjUSq'M'h'@
%=p1.g[%bXg8:U$(#,"ntTN&OC4jBBHb"b6mV^?"U&FNY>VqJ\7h/b':-Q0+K4)0k$bRtZ^qpM-ZZrf`T6ADj\Sf@J8"0^K22-?F@
%$/0('T=GGap<A!U0Y#@5/s*8^c(60'V@1kHa6_/CE,RcA?TP6rJ=,pf9*ti^Ro1"(h3L_pR8J?)VK^e,ZVX]flYXoiGE^c*Js,;2
%M.3<[kXJ?!YS(,i1i0E!GSHkCU"uA,2t:FMcs;TP97U0b'sD,U2B61S\[Abo?EN0K2cq>pq!?MMa?G-PY&pO+9c"2KMg*QB)l7eI
%L>%H9X>dWV/FHkW&U'''-aOT,/ZZr;a;H5!SdDu87EjcqZlJaIR?NGi6.AT,k9--+i`[`J`DB[`]g6(#6bkCE[M^;;nL=mb6*?$S
%2g=VLeL3#CFW")Gpgl".3)"YnK=Ji.+rRtKcGWP*:"i(.QRop`FJ;Nu7jfNW^ccb0S,7K3]NM=$jbbS7Zh2[rZP^G3Dcr/_QGs=?
%8/Tk;gleACNZiIUY!3?JdC<4Y+`!BT.iOX8elN+:4/\j^CX??/2KuD'Y`,=+Frp#KRjaW\PTL5"I.4OFWngBaEfWO0-/7j"7\9uq
%&(j;aHo!2h'aSU=MXEsW9>SacYP2RF`'MtD>C4WS3"G,`QS_FW9U7SUW),]U4&_fLMZqprG>`%T;S:4@D8\a*bcNsbY;h^%b46+(
%e(oE=ghCj9]eBkuIVZf9>b9PY"(-7u]DqK%Y\Uhg?<PXjACjclj[1@'96Q8;q`g$,5'le)"]7s5%f'qALcZK8PM$4:rQ49MI'A>;
%&m8'siV;fabkmr"W'"1V\U#*<e;b%JCQVI;+#<&\#`S^r`'G8N7/>f)_\m33'rpGK8+$6De_),+gT@B9mpPs"*Cd$r1>Zq2O.L]O
%4Mb]2F6;_TTk*hM(&gU"osMGZV-Mucns!1ZZ9jZ*,W^SEs6(='LdQ,g(2R.OA'34f@!DEG`hnDe&>(,^CeKPkUB8jr+5\ph5f-kW
%P+]>r>4K:-V`b8K]RoI`e;Q2L52JiUG_j*R'1leTB?GEZl;fS^T++0N&:X_lhfMO)0"bmSWt"tr_52cYN!I]4VaP?"&J]p@(W=5$
%580I^Z53NK-;Y02UYqAhld9jn5<YC'l`fqYl,cWCQc<>QI'OVe92PUE?m/_Ap%A5'ha0kYD*`H"O2oqNRA;/5N\g/oeV(j!oJ\,V
%k$<QL(#d,\*#*eY\PE]=V`?`tp0b2<U[!m>7#k>a>E$i)V#_t6Zo9(PR?+O0T#"FFjTg%Cnj;ESCdHd%=kY\68D>l:iF*qJei4Nq
%B:%&A^":LflonN,EI]lU%8\H/.NEjR-W;fCbE0RR,2Vf7(:ZaRAo:`,$2E4RFXOSWle9[b_g0ETV#raUUrc,fqZc*+0k^_Yb:l$I
%GtYSd.8?HPN+D;Gi2+`)jkhP0e[`cg1eVgHo!Conem14jFW;Onqr6E4?!DfN1[I0!1gO=UM=4L>ZZh3$Pt>rtk^LlS>t*gdiO)3#
%_+;scp+qNhZSSZdH[EK=A$-8(]lL8=HIR._G_T`,Mf'Ssn.a1kPQKp75ZA\/hai48*3(-pV^`]+H%HoB;VVbBkO.\aC0JUd2/@=Z
%3rjJ%#']3@k-\DIfX1-5im#e+$+%T?&>;m3HSHAIpR3\?rIfR+.#PUE"SldoNpt`_'A?t1-I0#X/E)_"p_gV*k[8T_f2gd3b4)I0
%]1Tu\TT\lVC"E&8&qXgp+J:80Fblj!;2JIc4Kl<MK8%r`Z<q"GI>p9s0b:pXa=ItKi_4=:+<H_37YE2ji@WS(E)O3H?i^Lc1XT5k
%nIujETUnHt%)u-\"9fs.`o)>)j/"S:<=#:Mlg%/k#[0X#mYqD7fN,go1),!crPh:@QciuIf#??NN2(q3%q1'`JoNRX7r)%hYI,.N
%)/2@]aG`q[b4U%YOAa+ZZnkT:M"PD]@[68<!+EC;T+QV'*B#]/AuZ6RXr).#:NJ9@KT-(>Ut,dZPkAG@'`;C\$YN$B<0^".#b8IF
%Us+W"2'[b8s/A?hV$KYAr/;&/GP`8/2Zpt#b)E,j6.=);!).BMB-cYiH*Ga[(_:Uj8%o'QA!8<.4+eLkoHU><f*UpFF_cbe6pEG,
%\Xso*=YmDe.8-lRD3RYi*Epglg3+=2_A6>EGg"Lbh@IJ5*!770iaL*&M_O1fV&_p6(qTa)GZrGm0^q>6%N^OIRKKd1[`p&L+sOR+
%o5>2JEBBFiV4rV^fR+P]U@lf>5h(MtZH1Wh;5OOIrX[qsg>Fos*P`m<r$Mq]D`UZ!49O@&#`)s\e)>j?*?J^L5(IdsB,(%\&<J@Q
%TmP`mjjl"q:c>ljY(cPU`io-^c=d,r6ZC.8]u/dY4S)SU0e9o4Y8?RNl/F1J!!EnUBFe)!JFH"apg#iMXLsEq2\oZMASO<^gbdD`
%R]_u[pS*$eeb_48qpjp0iY>SPmU#nLVGKB$<:hIh/FIG$gVJg;3#@UC"E-0]".4j"REoXQdD&$eh^G./&AG/,Z_.PoNh7*frhhRF
%8JT*FF51B8RU_c4(ULQ9&a6h3,>flImQmXS1Y"oGhLMBS2D^/4l0IpQ8\&eY42c8#@rm_o;JW"4Fc<K<)7fQgbi%?IgrHjYm,.@#
%l3R/I.d:*sK-r&d3*pE2`RkVJr6Po*a0m;%+EG(FEbp?^+,S>@+H"@>HYlt3UN>,.1h<abF-MNrknFpCNc3gS!rDWLGnn=hT^1+(
%EU+=+!X>SWIA`1=NS1XdV\V7Xi2Pd!<C#G*ipl("#]uWK1gY@nnKEt^a^fZ_JUgEf]I9/l0Dl/4T$DA)9jhUb3-YWtDQc@c^pTH"
%hQF)qG,4B.gOZcc)2&1R>.]_t1*Po+0gcG%\'%#QXp."7q4ShoJl,eXIsWkDT/rk%fBb9RekES(d]D(BT&=k862F<C;u>#(Tngks
%G9%Yn*O7sfUu(eJ*o!DT-DXL$+YuPHf+S8\?MC$f8!BJN>lMuMHS+meEp7]IYol?lL1%JOGr$_)6q4OeiB3!?IQrH_b1Ah'%&+NU
%1rI*NE*Vdma7sX1D&t^5oMN.H)K8-0T0r0`&)/n3Qi=3:)$^WiJ(PRa?^eO4a0oK$dbl`UOr;,B$M?j/N"2iCXWU!FdG)XcnGI"'
%?h!dGq/!53%V]nE]Ea:b]`ISbNlKUg'l0C\3!AggA!J0D;QWF=bjfY7S8TNMNPX6e$];_5Z2VOq5_1d-Jd;ZiSspp'1--g2_VUr1
%aWka?6)g"eR*$1/%%tnP?Q!re4GT(R\0!?TlBZM'2jHQ!EGnZ!"Tpb'_Ze+,"*n$:Y#AiOXe!F--ELadW[LeH0ESGbi?1'f*j$+<
%coaX6TI:t'R0R]#"T)2i0MoS6Gi/I=\lLb\gV'TQWK2CYk-#:r5U@AOCZN(DDI7Q?H.JT.;8LaO0U#^A2J*X5#/!lXX`L>dl(b)0
%]j#Eh7fr=HgBV^H;csrl(t'u.-knLK3MUo-rA-qg-mH+eE5*(b%d+c,kc)K"j*YORq=FY9WMfsXB<dIhCW5)6<(e!K=,<8bWb2k^
%:<X5=NM8)rd&\5D2t?g%gomAtMct,)'/@[SD5>Y"lZrO)p\9UhoBF+4!'Hb<=3P?i^ueYp8%U+sC?VE8/?p*U$A['&KJq=ek(Yo[
%\eT)]RlAr14HDu=,!7pMe1Q<r9L#n%HXn_!FJt[drj;>;s7ApX$+JYI"hD9&h__+?80p+A)0B3fO^qq+.M1,'psncZ-iWD@>iVHJ
%]BufnqU2%IYBtoa6+JY;]@?*,m8;a_N3iD`^V^7]N&F"/#j-&-_-,QSD3#a2<l*Xn<Lr=/8:E;NS6m$(k8pbmq&9*Ce)4/uP*_<E
%4IUs/II3&q5@`Nnj\N#Cfbf+qktdZ:QSV5H7L4&Zs+(,6a\rfH.B]rXh'M9&,gpZs%-FMPWq-eV[B^[hXoSiiX"MIOiS-6RY2Igb
%_=GK)N)JJC]^f`(r1Ys$2&"B1l8b'l9'ja]gBPijekX.1-*a(ublV#&7!PY*6q'bpCNXoMY$EsuY(PhkFVq[#lZhl:3;?RP3BbWT
%")Z0rj*,]GL.$N$3)(9toV<pT5>4Q/lDjGPR50P`1"PX49[n7aPgp80+-ocgg<P?$KMcJ3X.Z)=(1k6*PC5!25q&%<gY-?A.ar&/
%h'i78?^lgkIlqKEG.$#UI&hB&I.tbolQAf:QdOZ^^KA[V9U>1D4bSu<@f&:uQIKJ_%Kh>YLJ[eT3Ep6@'s`#;6O7#`E!g^;-$'--
%m:N:[K^'*Hi2jN5GV=i6T*U57T"@.Wa6*p758!S<-kfJ'Q9#Tmne9tZlZoJ4N3B\U-_bdgrm20NeQp5mbTYK[=TQ^1eNI69X<%R`
%b1rsnITXm]>$Zj;PVoD!YuFe;U9rZK=m9>mTc9HNFrp#3&9>,8;<t^KjYf/L*7S\Aa%#l13Ep68'rq4H;>.WQQH/,kFd(ap=+BFh
%B!ko6qtqVuf&G)`+Q%C(>)$G"[%d^$r>mYkh0\7=DG0*V*+\H.p>,pLFD:H?k\5IO6;BTqs3-NtF^57LeAh(n<kpItF^:@0WZ/au
%QeNtNLNPhHl71lWX$LT][CSI4[95Fq[<q^^DHp5mH)124bk]RQ\==f/?QNA=>783'\\E;=rND)""RR2qZ\VqC8`W=fU7A*>m1'6#
%phGrA<jVt>P+N<S)_G9LDZsIL$le]\'[Ti`9)#Q29:KBkg6NMb1:8]Fd+=^ZpTRRhCG_?!:k14I!DQ+W_W\T?mN-JXQI7q?(&k#-
%7M-(r&J*GS[^9-`KFI8i"ET%#oTnKBckT&TbWu<.0JFgo#;=h0PeI6D&&o22#bsr3`OhcncF,W(dKQ(b>S_-kOfMF^G7Pam7lD48
%ia'nGLI=$cM.KEjF-;9$QkZ?cZ/&h2bsI*Qm`P5W=-h+lN.AtF*(H]-6LGrDe7N[o?rLhnh?@2)ZpfBr*!R0<q\ah.#Qh3GJ\)/8
%[AA*aFN$JPiH!7uho"4dQ(^YrSmFP3*&oru8/KLhpKjCZ)>$s"Ilrq7<CqIN2nP(D]:"S$_7#h74])+='Frg</r)4)%.7TQO=TF;
%4BOAh_d)cF=6s2Pot.ro9ckmMM69$oP]f\8`/OU6BJP4EI#4$u6jTH.G"<0u,coT$,Yd7&QZ9*0p-%_)j.2QK/0hV/K66%/e878F
%C2jK]dIQ[8&>&Osal>`d\tk3?*R5e_=s1*oe4rI\#hXsk^_A4>9h(SmlLH`Y10sul>6C!>Cd#.AK#(q*6%RSPT1NB#Y%n/Nm_Y3-
%.9V[-CuuW"MTQaFI]0=F1VV1!T>>J&On_@eTj5GXmf3Ia#'A%rPjVtfn>EpJ0/N0.T:UELIM\kI<14?5R>PgE7.`C:R,T(D2["H*
%fi7]b;^%P36?so4>G!tJdsF'64s=]B_%Ie'NFs\j]c/J-$[!RB<a@DNZqJ3,EfCXp_8T'Y>'(D\W@Q5i#\fY?-NJ5o#_rJ@EcqHb
%)=9<oN"l<dDQWfJ-H:FeTT/j_jHo]K5%nQfiWtqiB%'kl%m4BmCVD>492:t(:m%Z9_8p#N".p(#L=n7C"NO]I`jRG)Qc>nb$C.dD
%ZI\3Nk2.'X"nk=phpN5MS]:Q0gp5803$`FhE$rc`r#Y@e*Jr'q/f#GmLB+U53Z8^L_ppc,6q:fKgq37YNb],u%(7HK??+rM%)p([
%(tI"V9L`%*OZuP^*J>r$^*[MA`&eJ1eg#t60Xp/*)Nh3"[Isg10%?WHe[q\A2ZY]'J2U"Y$?@'FHSZMRVth(\"Ql?Z/a0dC)a-QG
%JL9Lhe=o=c9]V%b\>hPBY>*-Y\@f+/o!R3/Dp:`+X)u6FHklDo?Sn,Ql568]I)n#^[I0@gJXA>@=8$Nlq_KZGOsS6AcmiJXPpIl=
%ZDtN+^i5'Ugi]G[V9_k=`8QETBr"(l/!of*4$2Vk9Wp1GjIgQ(fmY9>F2tnE@5PEQd_^&XV*c<F95[d60b-5L0Qua[*RD8j3>qT`
%a"abXq!K_gP5Ya)%S5I.6JFKEY,m'KA,N[q-\7B/6]apN*,=0FN6-9<D/KH=aG/U&Sn,ob\J>X9EjWK"'+W/*\W6BqSU(7rghZqR
%4H#WWkp%u_&#):AUU!4%R<0@u1o*WG"(_W1*[;"%d'4uR'"m_lWCGM)6b4Tp%9:0abJjs./(EN$dt'4gnA=:55XSL_<[L_&,9*'C
%*+P/h!Q$hgk=dc6Vsb=E@W(6Y;ZI>u;.jcNjG?<#5SA;G4JqpAfEhR!?*``4]m>lX3V.ZJ/8;Ao+])iXXkQMo8CG[a2+B%[On::1
%T'E,2(25#Ami<'TI:Uc%e@6Q\X%5en%Rg6gcpk0[j<H\#;%]IP_'EGHC3#7D.3>a25/NVbnKAERA0\.[5r-hujF)p;0@EbSeF"0q
%,I?+#C;$$t2=`!9W-!N#0$G#`OL:EX0>kpjVNOlD(!bS^#WV!Ecd$Jg+arLiYoQJP;eHNu5`g7I0$On=".hD:#p+2=Ni00K[('5k
%#s>7T@J<6QcFP2V/23o4&9Jo[UEF1,AD&5_muMG$B(uB56pV1X&J!M'C'<#L83_Et+$`L(b!K5pYXZWX6QARa"te&1:c:pdS],;B
%$^3U0,:Cf0H60YF0<7NM!TfmQ$JHal.2PKXFWuqQ",6poDlYSN`NFap\Y7un>`c4M+,W)ahOk7k*D+&o6X2?=cn<UY$g-?8GeekE
%)Xc?"$;t#UKO5i*A-A:=YRqf8dDiK4as/8@d'TnL+i6MmKBU-DL]S1UNMH'L!7dJ=PZ\Y3S>Jq$&G7;#`&+W@7BmjDI%in:mXSmp
%j8$bImYo&75d2qoN=<QoQ49:o@-o<2)_oj%gCR0]&L!g$KE/)+jN.WOiA_4i`$gG!4)TU_]tr,`&3F!CM9O%t$]+GfKQsM;Ba#ce
%h1TMZ+t+a2ej%S+K:/'OCHj!`4aBTG)8,9ISC?sGB)[]o&TT[:HTj2\.\+*O9b]aOdoDX1=OL+f$-bM,DMl>9GZ5dbFZc"dn-;S2
%>,'As!#\7rrK1MP)j*^e)`M?.\>s.D=Pkt!n\i*D/mgrhkrt8L.LBNahReLsP.1N@($8nOS0RGs,h+*O-URjSJ+o'32)dU+n:[GQ
%EXMV)_)6kTl!qU]i.H.2qNOnk`B26IV7[sDq`9ao-#dPE,f9:O<9RR?3NG*"`Mb>Q#9"?B`8'\6r=R@qN,iD(2H?+9OM9s+QKWl0
%Y"&">6-X(M$"r<RocWQ?8[sMbM%NIG1g03t=++3c1_c39S%C_u3/TUp?+R(7a)pbLpD%ipA2$9+f.40V,N$e)c>qZ2'6lU)`.Rrs
%VH;"C3U)sW%fDHBBHb#=1@mKWK>'CK`&QVkTOg"'/JI#Y)AcUD@>\"_^kt9f#$7p[8UR"4bm>"BQC:5m+4+CJqtT-I<M,NTNU(>I
%=`dVP3@r:"1p+:+@c"-nq&4LJ9I:>o_3b9o1OK'kpT6F>kY2>%5]VbB:,7WndCDQ'G3k_>6mBIrC!ini8VEMo_cdoL_S57?>_i5E
%Z75j3lb$uGCbRgK)N]0'&>^3bT+HUK/M*nn!3+:H7PhF*4PZocKUB8al4KdR-G+`Da<j11:Yd,`lG>03]4[_%,RH5;fe=Ut>]Sr)
%-QSEI,X/P9MaV$O+DK1\fdh!llpe6lZ0\D'n'E^_b[bu(G"%R/`<=SRmYWd,:PVWtr$#OHfDTr1CBbJq<r'@FV13fi@fAMg0/B5s
%!iE5&c(`51l2ad%%pk@?/+LJae''3Wm@ph!X7DG:^*J31D,q"\1[`sCfhSA9lI\Ns_SE\GC:n>#%7/V#VF85P=A1?K/WDWF+6`tH
%=%O>i[7X%k?A%=]!L.1^T_XD+4di3UB.e%'2j4T$[WGD@*4Ib2/<Ur!].KBoG.*BfQ%>Kk-JeKF(1sg^d4$-D+L/,1[:Kmu0g+O9
%To+lS@Lm#!>rc#==pRZ7a@F'UpDp',Bq4d71B^9Sq@ph4mk@@Z[O"5-TH+>+:SN*[,hoZD`\?YR[n&?0E#I:V2u',jM&a;nl1kgA
%^]a3>ADktl",^:3[R<=O5QceEh:1dViR]gumtM"[.=c12\F?t8&3^sTSn:5qrk%Es)lWDJ6>#3]3uk[hA9#FZ'&03M#e]eThW!?K
%lbX2)1VfJm*k6G[i]N]la'd4n7fse(Y^c9lVXUk]3Hs.Shb=P6?unZfK6;.S:WtY8Cn(d='WsckLLW5**@hMsNe%m%'Ejn:NOnm%
%G_lM&%P*K;VS%Ksb@c0/e!bg#/O:ImL"='Eb;8'(.0*,AS]P:]D6E(&c0l<k@op`lIat`J'<?k!YnIH4'+Z8b'=Ac-]:&.RgTN2g
%'?]1i/[ORQK9H1U/q//n0DG=M(/0'n<u0p^VQAAea]ZcmR#`R!"[rUlZ9afR]5!:JNX&K^@#pM._^"/iBT"L;)>@uIW:ZmO[4YZd
%CL]1Ed<3AnVpW6Ec?YJ4FI82B6kc*#:eJCATQ<Z[RoHX3-Hp9-aIGi>*T$0q4j_q-A2F#;Xn@+-[[3Ze9Aa(Jb0u'<CgfrcJpZ#>
%9@1`hitoaU*V&kaq;/?B!_sSiW43[WK`a]!IXF+R-o8Bj6Pf1WbH=NKIZq`'9$9=qO(S64]G0NtkX)<j#fXfc7:KA(_4)ur@3dE`
%gG#4Z(#D!c.mTEJpQl'4jp$!m@8Lf+QB'(gnYI`bLs/]o9hPTM(Nh0Rld"C7YL-FU\f<YP(o=EnH5"$VKdrfa-rR"9g@[dtm?eL<
%jtecU0Oii`J<@fin(.B=K6.t\/is\dK,uf.<)49ciW1B`3!K\/Pf3+C#@cEM@#AAXgpjK_A.4W0.%HKt11j-t%uo#tA1>6cp'dSa
%$PYTD-o\sm=B^gq=hF8t<LEgFQA4L#?%m%**p(i16_AfDkVKQ[;n4\u;C:V)Mah*r+B?\9*)N'J$_?RuV<E(4LfQuD.a)r9$\tgP
%pn9i?ZD/d.\#^du>*Pi#]$*k,6q='?jjSk3T2>,JE8a+qYtA:[i'hLO-KI@a1)hWYL*XcBJuLtq=*`kjB3dHCB<55:Jq2p!0\%UN
%Bdq)V\h_EE^k=56emW*62PJEaR@0KL^AZG3Eg?035g^OAPKa*KRe?+T<sb`t?nr-?=iQgN7^RT&=Z6Pu`,*^N$Z%\aks#qo-g0SH
%N:soXY2-eG"q.iCZH5;NW+:F/-6'm6N\TaS('YnOXOcKY=DY%-JRp6j1aqNGBdJi??Nj<]BP!7l@m?34L"mp$JqL^W[H`K(%g-!;
%.m$IHI_1S2A]Gr)NYGQB*lhs]dNRApVTYLQOpDIm>jQ\,;<Be^pEZDn+-A@,'U)6+05N5?XIg\,"e^"b.%n.HAO2bc(J@KR'g/Tm
%J"Da,Rifn@=V@Qbm=XF$bsKA`L#&gOcUp[CCjr6.a3ud3qP7@%ghPdB`(NaNin0?u$S6OaO*2#[KP3ek$:a5Q=$=?r1"np.Wo)"Q
%HMdZhRH&Ft72\I$L>$/R8#@O%MZXDf33:Y6]8D[TclC&AqCuLI\f*kA[HbU;.4`n[I`HsCH&ZBkA`r)%P:a0>E(3_MHgAjmm%?eI
%)(Sognn%^`(->)n]*@*_'6?jF+3'Ph?@D0M%3l<:lai5Yfug1/13GNSCf$=.;X1NA&/'VuXM!M+%kGg$A2aom2(J>d+gI&1!s8?-
%Uk9iOY10u`;nuiuaA=82".I[Qbi=Lp"Z2?OQ&8B/7]+Sc<$c.=KXe>/%#RjimRgYDom$WA:s<MkQ>#u6EmmY"^6uOc/@Xli2?DIV
%A(_p#>=GD=)Y%duL"2.>ZH`Oro.g-.m;(?EZuU*)gVYTk.RN8==]F-b?37cI9hchk>0I:UE+mE`em_A&VB*BJR6i1R+dYm^X6IR#
%+R@<^dj[@(+;rSSO1Zrm#4!o_?^RiOd:I`!H;N&8*2l70"<4!+GVP2$dU>\)`F.D8.>p1jX+,(,To%Vai38s]$'$Vu,uW]<LKPfS
%dKXE'/T",I#aDbVg5E?KUZoe?Nh2r7j9O]`L<[F^_tIc(VqAd,;ZCql)ge3MJM#S,D5QmT^o5142Sr_5+ro"8>!i_l*Orh"%3O,:
%Fp]@`#E(aIAK.u%n1Y]3m9-H>c)<O;PDL:-PT`d`c?$_[E'IfE04WR9_U)unSJduP@MX4&NEHVI[<t,;^\\oK//;OlH>&haQ!ql6
%\in;Ea#3eS55seL%]p>cjFLD(BV_$*WWo;WY2J_5G[+((fmWZ[l77*jGjK88Z_h@I?6m_B<a7oILJkbmT)/-SG7:mr.pGt_?p0#Q
%r^C5S#nKie8.RE=gOPFb4&+.&!qH;XMV"s4\UBMo#\Y4%f4KSFKPkYt:H&C[EOO!L-3"D%`FRgfoM11R*h>1P"Vd1k2UQIZ1+:"*
%KXo.iPa#n1R-TEOY63iQ%`h8[^bGu+FW)M9We+c!4)P%c>rK9I_<2(^$TBJ$mZptWq:1SoV5:&@pfX[@JrW$ZH>m>E6*Re`OZQ^p
%2u+edT?YMf8VA_4#U!@4nZtc<]eL=S=^p=iQ:-(\)!s2J=.%,S&:bPtN`RiabOW5m"/-mP/ji\M+Z#'Z]$#)j155Dkcp43-)HBh0
%(tkK7*7m[hAQ:[Ioqf.Go;Z-+$m#H^OZD!eQb%)5c1#kE`j`r*?J"JcK2m>*s#]gh$rMpmPh-X*C>,#L@\lBG,-,+5)As=dKq]90
%"#4)(SYb<\Q]em.eXo:?UTI];&9G!)lGbE)>'oPKZAZV?OUdTH@'S:]Ska=X)>]Y1G"b*Nep(Fh'@W^P$."pRLGu@r@#B`;(>#DK
%?W^UcrG^UL]nuMff.XW*ottR%SBo7A);75gY:&o6eGdVLcEWsZL\%sbgK(oP\'()M*$Y>+l*AO9/$Z]oYNu%rp:mn%l:sD/[`c.j
%IqtM9PAp4`2S0iUS>HF#MI9*M3RX:e_;0[HU%=DP]Ad,C(Ou,#4gscUTfr+:hY3iIQV>R3J'pV4KH=`ZpKihd<1:_@'F'ltP.]\8
%SJsc#dqTp6N*q$Q@.>9ICF9''-^g"4:g>[`JU)RIeQb@!QDN(lU)Hp5V"7"Z62U^Ibu.PEoVG!k%8+YJ=@\UV\rQ<0MCuYU!?B<Z
%;+t0r:GnSpkK/;E`EBZd'#Z,=Lp_Bs[:O=G23DJM2fhAn)h2iM4a1mNQ#T(6\:X],G9m?PqL!-&#<>#=^g*_A4W[Dk[:0`fLbQEC
%($+,I03@l>lug'g\*[ra>L:qf)/lMDg-iJlcPG@&F*KcaVegOFNY>GG&-\SkG&LWIF-&m:EtZ<^@15p8Tu.L,AFr(o:0Gf0.U_Y;
%>QKUS8Wmg_a*41sYr7s]W`sMYb0N]393%;jhOhjiJR6R_Cc*Oo`Ahfm=1DdQ+\F4@,NJ0\4C[?:'tO5NlGg4+W[_I0U0n-@1JX48
%i:X,^YM<SVlpMiEk%D*n\Z3gimgliO4G-2=i+KrY2?`dYD->NN0]D.HM?uKdX0g;m2HDfS"@!h?EO/NY4G6U4*bK9:bsq)&q-!*t
%<HT<l4m&A2?9=Y>2$.Q,/:I'HC(XY=E'LcEbuK0G(Z0R^^8nL-eg/?GStBha"YbJ@1n\Do`2K=?*TBH5MXS5>^Umb3me5i)f4L8+
%@j&CKA^2f5q/^I;1uPVnR*+l=Da$@Wk*QU+m^<&i>:'%tl;eFXBJ_$3d46UKp_HpAmL=tB?-(^jEq(baMgnr<?S/_'5..3=8id,,
%ZK?nG0*]1%Gnb1sFUP>(MJ,$Gb[tg+!i*_7<=gfO<\V^cV5b`#Q570d=uo^"3hfm0Fc9ZB>M7Te,n;619kj/b#;"A:EA:>0+][s1
%[5fu)g;MHlf<t,b#8Z!sN$CuCV(5;WmIpA0^a$,W;C.VD13A4H1"b3s2S6+,jP-U$h8In42t+2'm:?[Z=t&D_'jdC)G-Mc7=i3gG
%XdDLNL.Z]YPo_jk'<<l=U?Y)91@%&\Z(k:ZJ1<ic0FO>WVC[\W#+`tA\lF3Eqjf7K%.4FQQ!Ie5J.p<MBQ=j)#ZK<g;YHP2DbMCM
%@F1L&"o2fTPNYFlLK&iHJL4IKWj:tk>BD&mm8sQukH1cM(`s'c0W3[=l"6]B2M;7-V-A&ZK_&E::U:'t4N:^YT8huB?)strm@+4L
%&5#r6R&*51)ms2;B=7?AWll7:9jf9&0D4!n@'-)c9bE8Wkj'kbACG=bs"4FT(r0cQa&diBJQ4VI[i]/Pl@N"o^"3#"&QkN"Aq>(F
%bu`K>VUtLfJ50LccH#+s*,!ssgA:[PXDhbi1+bg.=@#6d71\eq=CkE4]F2GG@!sgOZ[LLcoAhX@TK,@V]<XFVS?is=R0ZHr]q-m\
%:_?J78/[@&/4>Q&hoXLi$bA8F@c)%c\/P4BX.abUr*@FDkj*Ei@V!t5o//p)R2:sgPYkab%m\aJX0dr=$=7RIi6f9%FP(a2\-j]A
%[='QummShc8"]&#3[egYmFstDWU3m/Re\D/qrgtb2Mf!"GAN#k-M<8!B,,6[-Pu6':Nam;/_VZNp8(g5pX,m&B+Wfk]/N3SEV4a\
%@.WVTq*+XShnFBn<q-!&d:X2DE(-Q1q)$:&Sgtr*8#N).Mu&K?.d2Jlr-'5S&3oVt.&6^P:.)!o]5D[!IItPh"qK7SJh,Ybi/n^_
%4:T<(IPK@kqWJG09Md^pBeU=%EuI_@gKg:akbDK*bglXkH;cRC-+9ed?l5!1S.DDajRca%9*hrF55NJ@"n"9OS(nm(#`h96mB14>
%oWqcFpX,o8Q;]b$I>\FCDYmJMVAH(V++:/-=M4WjH$R@FFf#!!'0RT!"50lI=^+V^d*,YoRrq`RpX,o8p5OEo@c(f?4F:+G6"F*b
%=g_hi>B<h*[+un9L-GG9%pfY,3uttA7mE'2K)U;&jnn6P)[b-t6c#4bOI^:9F/!isU[;g=2>#9<pK\?Q^m&-l,$RK3EEZlfouj>c
%cprT,Km9t!K#D9M_\6LN[aVC?%!(WCc'u7CfghYpUW,T>[d=rD&SQ%5$Kuh6bP0D^qA*V3BW#kbGu<&"$9#RGjnn7?BD\Ebj`]Lp
%oo%DLIIsLA>865Sc<:o:=Z^C&D!%X[n"\5$mFsQi"i&AYGl$bqr8_t2'4E^i.A#r>O8?%cCZqNXn01.HlaiYmP8)8i)GESJ[qcG$
%oZ%CFWDDMs^(j4s31d_@;8:[t%=Rm'#Lh?-JHQ)"%[]_*/2fS_K$@KF`Ok&h>Q7VMY73G6POV\\Zg?&Ie(==dVqrN#AACkY[e#YR
%LsR-f9;\G4ERYp'kc86TMl2N?&Zp+BZ3c27/H\^XdtieaKI2Z\UDg%H:C(Q-8<rcTIG0k'DD;.f7<]sO#j@^D$@5sVF--,:pc]0J
%(q7*5`.?2K$\OYa/&Sh/#^r*8$]iT?M,n7gg^+ZM",!L-EgOL`*FeWPZmd@4ZUU%q`^-EGAirNdEGL^`FDoORZ7!&Y(CZ.<k;UL;
%"rY/FTulmpNi-SK?NLE@;pi7[7ObSPX6!?8d9M-Nn,POf0=#;N_&,D%p\OF]DU52H"X@AZB;7^o<b5c'Ta6mk%<cj>JuVBC^lp>Y
%(5+spP&;X/KBWg?_;',ZYqsq^Dh<.pF"PW!o:r$t"aDjPcRXe]K5?i!Kn[SCFi(<,/T7rimJl\Vrkj4Ws7;l_qCh`ls7XX>+$Ug^
%TDmTkJ,/3@s8)?erqssCs7d+Sq:j61rUSq1^]"skia;]2nR!C;o'7rYqnN1-lRs@Zp:pV"rrGEZ;W(?#qWInTTE"F'r]a4RH<^~>
%AI9_PrivateDataEnd
